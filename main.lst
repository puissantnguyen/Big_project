CCS PCM C Compiler, Version 5.015, 5967               26-Dec-21 17:16

               Filename:   C:\Users\sangt\OneDrive\Project\Applied Electronics\Big_project\main.lst

               ROM used:   6303 words (77%)
                           Largest free fragment is 1148
               RAM used:   102 (28%) at main() level
                           200 (54%) worst case
               Stack used: 8 locations (5 in main + 3 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0D
0001:  MOVWF  0A
0002:  GOTO   5BF
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   056
002B:  MOVLW  8C
002C:  MOVWF  04
002D:  BTFSS  00.0
002E:  GOTO   031
002F:  BTFSC  0C.0
0030:  GOTO   059
0031:  BTFSS  0B.5
0032:  GOTO   035
0033:  BTFSC  0B.2
0034:  GOTO   05C
0035:  MOVF   22,W
0036:  MOVWF  04
0037:  MOVF   23,W
0038:  MOVWF  77
0039:  MOVF   24,W
003A:  MOVWF  78
003B:  MOVF   25,W
003C:  MOVWF  79
003D:  MOVF   26,W
003E:  MOVWF  7A
003F:  MOVF   27,W
0040:  BSF    03.6
0041:  MOVWF  0D
0042:  BCF    03.6
0043:  MOVF   28,W
0044:  BSF    03.6
0045:  MOVWF  0F
0046:  BCF    03.6
0047:  MOVF   29,W
0048:  BSF    03.6
0049:  MOVWF  0C
004A:  BCF    03.6
004B:  MOVF   2A,W
004C:  BSF    03.6
004D:  MOVWF  0E
004E:  BCF    03.6
004F:  MOVF   20,W
0050:  MOVWF  0A
0051:  SWAPF  21,W
0052:  MOVWF  03
0053:  SWAPF  7F,F
0054:  SWAPF  7F,W
0055:  RETFIE
0056:  BCF    0A.3
0057:  BCF    0A.4
0058:  GOTO   43A
0059:  BSF    0A.3
005A:  BCF    0A.4
005B:  GOTO   000
005C:  BCF    0A.3
005D:  BCF    0A.4
005E:  GOTO   441
.................... /********************************* Include ************************************/ 
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
005F:  BCF    0A.0
0060:  BCF    0A.1
0061:  BCF    0A.2
0062:  ADDWF  02,F
0063:  RETLW  28
0064:  RETLW  0C
0065:  RETLW  01
0066:  RETLW  06
0067:  DATA C3,3A
0068:  DATA 72,39
0069:  DATA 65,37
006A:  DATA 74,1D
006B:  DATA A0,12
006C:  DATA 30,1A
006D:  DATA 2E,18
006E:  DATA 66,00
006F:  DATA D6,24
0070:  DATA 20,2A
0071:  DATA D2,24
0072:  DATA 3A,00
0073:  DATA 53,28
0074:  DATA C5,22
0075:  DATA 44,1D
0076:  DATA A0,12
0077:  DATA B0,19
0078:  DATA 2E,18
0079:  DATA 66,10
007A:  DATA 52,28
007B:  DATA 4D,00
007C:  DATA 20,10
007D:  DATA 20,10
007E:  DATA 20,10
007F:  DATA 20,10
0080:  DATA 20,10
0081:  DATA 20,10
0082:  DATA 00,01
0083:  DATA D3,22
0084:  DATA D4,2F
0085:  DATA C8,2A
0086:  DATA 4E,22
0087:  DATA D2,22
0088:  DATA C4,29
0089:  DATA 00,01
008A:  DATA D3,22
008B:  DATA D4,2F
008C:  DATA C4,27
008D:  DATA DA,22
008E:  DATA CE,29
008F:  DATA 20,10
0090:  DATA 00,01
0091:  DATA D3,22
0092:  DATA D4,2F
0093:  DATA 55,27
0094:  DATA 49,2A
0095:  DATA 53,10
0096:  DATA 20,10
0097:  DATA 00,01
0098:  DATA D2,2A
0099:  DATA 4E,10
009A:  DATA 20,10
009B:  DATA 20,10
009C:  DATA 20,10
009D:  DATA 20,10
009E:  DATA 00,01
009F:  DATA 53,2A
00A0:  DATA 4F,28
00A1:  DATA 20,10
00A2:  DATA 20,10
00A3:  DATA 20,10
00A4:  DATA 20,10
00A5:  DATA 00,01
00A6:  BSF    03.6
00A7:  MOVF   1A,W
00A8:  BTFSC  03.2
00A9:  GOTO   117
00AA:  MOVWF  22
00AB:  MOVF   1E,W
00AC:  BTFSC  03.2
00AD:  GOTO   117
00AE:  ADDWF  22,F
00AF:  BTFSC  03.0
00B0:  GOTO   0B8
00B1:  MOVLW  7F
00B2:  SUBWF  22,F
00B3:  BTFSS  03.0
00B4:  GOTO   117
00B5:  BTFSC  03.2
00B6:  GOTO   117
00B7:  GOTO   0BC
00B8:  MOVLW  81
00B9:  ADDWF  22,F
00BA:  BTFSC  03.0
00BB:  GOTO   117
00BC:  MOVF   22,W
00BD:  MOVWF  77
00BE:  CLRF   78
00BF:  CLRF   79
00C0:  CLRF   7A
00C1:  MOVF   1B,W
00C2:  MOVWF  26
00C3:  BSF    26.7
00C4:  MOVF   1C,W
00C5:  MOVWF  25
00C6:  MOVF   1D,W
00C7:  MOVWF  24
00C8:  MOVLW  18
00C9:  MOVWF  22
00CA:  CLRF   23
00CB:  BTFSS  24.0
00CC:  GOTO   0E5
00CD:  MOVF   21,W
00CE:  ADDWF  7A,F
00CF:  BTFSS  03.0
00D0:  GOTO   0D7
00D1:  INCF   79,F
00D2:  BTFSS  03.2
00D3:  GOTO   0D7
00D4:  INCF   78,F
00D5:  BTFSC  03.2
00D6:  BSF    23.7
00D7:  MOVF   20,W
00D8:  ADDWF  79,F
00D9:  BTFSS  03.0
00DA:  GOTO   0DE
00DB:  INCF   78,F
00DC:  BTFSC  03.2
00DD:  BSF    23.7
00DE:  MOVF   1F,W
00DF:  MOVWF  1C
00E0:  BSF    1C.7
00E1:  MOVF   1C,W
00E2:  ADDWF  78,F
00E3:  BTFSC  03.0
00E4:  BSF    23.7
00E5:  RLF    23,F
00E6:  RRF    78,F
00E7:  RRF    79,F
00E8:  RRF    7A,F
00E9:  RRF    26,F
00EA:  RRF    25,F
00EB:  RRF    24,F
00EC:  BCF    03.0
00ED:  DECFSZ 22,F
00EE:  GOTO   0CA
00EF:  MOVLW  01
00F0:  ADDWF  77,F
00F1:  BTFSC  03.0
00F2:  GOTO   117
00F3:  BTFSC  78.7
00F4:  GOTO   0FC
00F5:  RLF    26,F
00F6:  RLF    7A,F
00F7:  RLF    79,F
00F8:  RLF    78,F
00F9:  DECF   77,F
00FA:  BTFSC  03.2
00FB:  GOTO   117
00FC:  BTFSS  26.7
00FD:  GOTO   10D
00FE:  INCF   7A,F
00FF:  BTFSS  03.2
0100:  GOTO   10D
0101:  INCF   79,F
0102:  BTFSS  03.2
0103:  GOTO   10D
0104:  INCF   78,F
0105:  BTFSS  03.2
0106:  GOTO   10D
0107:  RRF    78,F
0108:  RRF    79,F
0109:  RRF    7A,F
010A:  INCF   77,F
010B:  BTFSC  03.2
010C:  GOTO   117
010D:  MOVF   1B,W
010E:  MOVWF  23
010F:  MOVF   1F,W
0110:  XORWF  23,F
0111:  BTFSS  23.7
0112:  GOTO   115
0113:  BSF    78.7
0114:  GOTO   11B
0115:  BCF    78.7
0116:  GOTO   11B
0117:  CLRF   77
0118:  CLRF   78
0119:  CLRF   79
011A:  CLRF   7A
011B:  BCF    03.6
011C:  RETURN
011D:  BSF    03.6
011E:  MOVF   1A,W
011F:  BTFSC  03.2
0120:  GOTO   1E3
0121:  MOVWF  26
0122:  MOVF   1E,W
0123:  BTFSC  03.2
0124:  GOTO   1E3
0125:  SUBWF  26,F
0126:  BTFSS  03.0
0127:  GOTO   12D
0128:  MOVLW  7F
0129:  ADDWF  26,F
012A:  BTFSC  03.0
012B:  GOTO   1E3
012C:  GOTO   133
012D:  MOVLW  81
012E:  SUBWF  26,F
012F:  BTFSS  03.0
0130:  GOTO   1E3
0131:  BTFSC  03.2
0132:  GOTO   1E3
0133:  MOVF   26,W
0134:  MOVWF  77
0135:  CLRF   78
0136:  CLRF   79
0137:  CLRF   7A
0138:  CLRF   25
0139:  MOVF   1B,W
013A:  MOVWF  24
013B:  BSF    24.7
013C:  MOVF   1C,W
013D:  MOVWF  23
013E:  MOVF   1D,W
013F:  MOVWF  22
0140:  MOVLW  19
0141:  MOVWF  26
0142:  MOVF   21,W
0143:  SUBWF  22,F
0144:  BTFSC  03.0
0145:  GOTO   156
0146:  MOVLW  01
0147:  SUBWF  23,F
0148:  BTFSC  03.0
0149:  GOTO   156
014A:  SUBWF  24,F
014B:  BTFSC  03.0
014C:  GOTO   156
014D:  SUBWF  25,F
014E:  BTFSC  03.0
014F:  GOTO   156
0150:  INCF   25,F
0151:  INCF   24,F
0152:  INCF   23,F
0153:  MOVF   21,W
0154:  ADDWF  22,F
0155:  GOTO   188
0156:  MOVF   20,W
0157:  SUBWF  23,F
0158:  BTFSC  03.0
0159:  GOTO   171
015A:  MOVLW  01
015B:  SUBWF  24,F
015C:  BTFSC  03.0
015D:  GOTO   171
015E:  SUBWF  25,F
015F:  BTFSC  03.0
0160:  GOTO   171
0161:  INCF   25,F
0162:  INCF   24,F
0163:  MOVF   20,W
0164:  ADDWF  23,F
0165:  MOVF   21,W
0166:  ADDWF  22,F
0167:  BTFSS  03.0
0168:  GOTO   188
0169:  INCF   23,F
016A:  BTFSS  03.2
016B:  GOTO   188
016C:  INCF   24,F
016D:  BTFSS  03.2
016E:  GOTO   188
016F:  INCF   25,F
0170:  GOTO   188
0171:  MOVF   1F,W
0172:  IORLW  80
0173:  SUBWF  24,F
0174:  BTFSC  03.0
0175:  GOTO   187
0176:  MOVLW  01
0177:  SUBWF  25,F
0178:  BTFSC  03.0
0179:  GOTO   187
017A:  INCF   25,F
017B:  MOVF   1F,W
017C:  IORLW  80
017D:  ADDWF  24,F
017E:  MOVF   20,W
017F:  ADDWF  23,F
0180:  BTFSS  03.0
0181:  GOTO   165
0182:  INCF   24,F
0183:  BTFSS  03.2
0184:  GOTO   165
0185:  INCF   25,F
0186:  GOTO   165
0187:  BSF    7A.0
0188:  DECFSZ 26,F
0189:  GOTO   18B
018A:  GOTO   196
018B:  BCF    03.0
018C:  RLF    22,F
018D:  RLF    23,F
018E:  RLF    24,F
018F:  RLF    25,F
0190:  BCF    03.0
0191:  RLF    7A,F
0192:  RLF    79,F
0193:  RLF    78,F
0194:  RLF    27,F
0195:  GOTO   142
0196:  BTFSS  27.0
0197:  GOTO   19E
0198:  BCF    03.0
0199:  RRF    78,F
019A:  RRF    79,F
019B:  RRF    7A,F
019C:  RRF    27,F
019D:  GOTO   1A1
019E:  DECF   77,F
019F:  BTFSC  03.2
01A0:  GOTO   1E3
01A1:  BTFSC  27.7
01A2:  GOTO   1CA
01A3:  BCF    03.0
01A4:  RLF    22,F
01A5:  RLF    23,F
01A6:  RLF    24,F
01A7:  RLF    25,F
01A8:  MOVF   21,W
01A9:  SUBWF  22,F
01AA:  BTFSC  03.0
01AB:  GOTO   1B6
01AC:  MOVLW  01
01AD:  SUBWF  23,F
01AE:  BTFSC  03.0
01AF:  GOTO   1B6
01B0:  SUBWF  24,F
01B1:  BTFSC  03.0
01B2:  GOTO   1B6
01B3:  SUBWF  25,F
01B4:  BTFSS  03.0
01B5:  GOTO   1D9
01B6:  MOVF   20,W
01B7:  SUBWF  23,F
01B8:  BTFSC  03.0
01B9:  GOTO   1C1
01BA:  MOVLW  01
01BB:  SUBWF  24,F
01BC:  BTFSC  03.0
01BD:  GOTO   1C1
01BE:  SUBWF  25,F
01BF:  BTFSS  03.0
01C0:  GOTO   1D9
01C1:  MOVF   1F,W
01C2:  IORLW  80
01C3:  SUBWF  24,F
01C4:  BTFSC  03.0
01C5:  GOTO   1CA
01C6:  MOVLW  01
01C7:  SUBWF  25,F
01C8:  BTFSS  03.0
01C9:  GOTO   1D9
01CA:  INCF   7A,F
01CB:  BTFSS  03.2
01CC:  GOTO   1D9
01CD:  INCF   79,F
01CE:  BTFSS  03.2
01CF:  GOTO   1D9
01D0:  INCF   78,F
01D1:  BTFSS  03.2
01D2:  GOTO   1D9
01D3:  INCF   77,F
01D4:  BTFSC  03.2
01D5:  GOTO   1E3
01D6:  RRF    78,F
01D7:  RRF    79,F
01D8:  RRF    7A,F
01D9:  MOVF   1B,W
01DA:  MOVWF  26
01DB:  MOVF   1F,W
01DC:  XORWF  26,F
01DD:  BTFSS  26.7
01DE:  GOTO   1E1
01DF:  BSF    78.7
01E0:  GOTO   1E7
01E1:  BCF    78.7
01E2:  GOTO   1E7
01E3:  CLRF   77
01E4:  CLRF   78
01E5:  CLRF   79
01E6:  CLRF   7A
01E7:  BCF    03.6
01E8:  RETURN
01E9:  MOVLW  80
01EA:  BTFSS  03.1
01EB:  GOTO   1EF
01EC:  BSF    03.6
01ED:  XORWF  1B,F
01EE:  BCF    03.6
01EF:  BSF    03.6
01F0:  CLRF   20
01F1:  CLRF   21
01F2:  MOVF   17,W
01F3:  MOVWF  1F
01F4:  MOVF   1B,W
01F5:  XORWF  1F,F
01F6:  MOVF   16,W
01F7:  BTFSC  03.2
01F8:  GOTO   2DD
01F9:  MOVWF  1E
01FA:  MOVWF  77
01FB:  MOVF   1A,W
01FC:  BTFSC  03.2
01FD:  GOTO   2E6
01FE:  SUBWF  1E,F
01FF:  BTFSC  03.2
0200:  GOTO   282
0201:  BTFSS  03.0
0202:  GOTO   240
0203:  MOVF   1B,W
0204:  MOVWF  24
0205:  BSF    24.7
0206:  MOVF   1C,W
0207:  MOVWF  23
0208:  MOVF   1D,W
0209:  MOVWF  22
020A:  CLRF   21
020B:  BCF    03.0
020C:  RRF    24,F
020D:  RRF    23,F
020E:  RRF    22,F
020F:  RRF    21,F
0210:  DECFSZ 1E,F
0211:  GOTO   20A
0212:  BTFSS  1F.7
0213:  GOTO   217
0214:  BSF    20.0
0215:  GOTO   2FA
0216:  BCF    20.0
0217:  BCF    1E.0
0218:  BSF    20.4
0219:  MOVLW  19
021A:  MOVWF  04
021B:  BSF    03.7
021C:  GOTO   30F
021D:  BCF    20.4
021E:  BTFSC  1F.7
021F:  GOTO   22A
0220:  BTFSS  1E.0
0221:  GOTO   235
0222:  RRF    24,F
0223:  RRF    23,F
0224:  RRF    22,F
0225:  RRF    21,F
0226:  INCF   77,F
0227:  BTFSC  03.2
0228:  GOTO   2F5
0229:  GOTO   235
022A:  BTFSC  24.7
022B:  GOTO   238
022C:  BCF    03.0
022D:  RLF    21,F
022E:  RLF    22,F
022F:  RLF    23,F
0230:  RLF    24,F
0231:  DECF   77,F
0232:  BTFSC  03.2
0233:  GOTO   2F5
0234:  GOTO   22A
0235:  BSF    20.6
0236:  GOTO   2A2
0237:  BCF    20.6
0238:  MOVF   17,W
0239:  MOVWF  1F
023A:  BTFSS  1F.7
023B:  GOTO   23E
023C:  BSF    24.7
023D:  GOTO   2EE
023E:  BCF    24.7
023F:  GOTO   2EE
0240:  MOVF   1A,W
0241:  MOVWF  1E
0242:  MOVWF  77
0243:  MOVF   16,W
0244:  SUBWF  1E,F
0245:  MOVF   17,W
0246:  MOVWF  24
0247:  BSF    24.7
0248:  MOVF   18,W
0249:  MOVWF  23
024A:  MOVF   19,W
024B:  MOVWF  22
024C:  CLRF   21
024D:  BCF    03.0
024E:  RRF    24,F
024F:  RRF    23,F
0250:  RRF    22,F
0251:  RRF    21,F
0252:  DECFSZ 1E,F
0253:  GOTO   24C
0254:  BTFSS  1F.7
0255:  GOTO   259
0256:  BSF    20.1
0257:  GOTO   2FA
0258:  BCF    20.1
0259:  BCF    1E.0
025A:  BSF    20.5
025B:  MOVLW  1D
025C:  MOVWF  04
025D:  BSF    03.7
025E:  GOTO   30F
025F:  BCF    20.5
0260:  BTFSC  1F.7
0261:  GOTO   26C
0262:  BTFSS  1E.0
0263:  GOTO   277
0264:  RRF    24,F
0265:  RRF    23,F
0266:  RRF    22,F
0267:  RRF    21,F
0268:  INCF   77,F
0269:  BTFSC  03.2
026A:  GOTO   2F5
026B:  GOTO   277
026C:  BTFSC  24.7
026D:  GOTO   27A
026E:  BCF    03.0
026F:  RLF    21,F
0270:  RLF    22,F
0271:  RLF    23,F
0272:  RLF    24,F
0273:  DECF   77,F
0274:  BTFSC  03.2
0275:  GOTO   2F5
0276:  GOTO   26C
0277:  BSF    20.7
0278:  GOTO   2A2
0279:  BCF    20.7
027A:  MOVF   1B,W
027B:  MOVWF  1F
027C:  BTFSS  1F.7
027D:  GOTO   280
027E:  BSF    24.7
027F:  GOTO   2EE
0280:  BCF    24.7
0281:  GOTO   2EE
0282:  MOVF   1B,W
0283:  MOVWF  24
0284:  BSF    24.7
0285:  MOVF   1C,W
0286:  MOVWF  23
0287:  MOVF   1D,W
0288:  MOVWF  22
0289:  BTFSS  1F.7
028A:  GOTO   28F
028B:  BCF    24.7
028C:  BSF    20.2
028D:  GOTO   2FA
028E:  BCF    20.2
028F:  CLRF   21
0290:  BCF    1E.0
0291:  MOVLW  19
0292:  MOVWF  04
0293:  BSF    03.7
0294:  GOTO   30F
0295:  BTFSC  1F.7
0296:  GOTO   2B8
0297:  MOVF   17,W
0298:  MOVWF  1F
0299:  BTFSS  1E.0
029A:  GOTO   2A2
029B:  RRF    24,F
029C:  RRF    23,F
029D:  RRF    22,F
029E:  RRF    21,F
029F:  INCF   77,F
02A0:  BTFSC  03.2
02A1:  GOTO   2F5
02A2:  BTFSS  21.7
02A3:  GOTO   2B3
02A4:  INCF   22,F
02A5:  BTFSS  03.2
02A6:  GOTO   2B3
02A7:  INCF   23,F
02A8:  BTFSS  03.2
02A9:  GOTO   2B3
02AA:  INCF   24,F
02AB:  BTFSS  03.2
02AC:  GOTO   2B3
02AD:  RRF    24,F
02AE:  RRF    23,F
02AF:  RRF    22,F
02B0:  INCF   77,F
02B1:  BTFSC  03.2
02B2:  GOTO   2F5
02B3:  BTFSC  20.6
02B4:  GOTO   237
02B5:  BTFSC  20.7
02B6:  GOTO   279
02B7:  GOTO   2D7
02B8:  MOVLW  80
02B9:  XORWF  24,F
02BA:  BTFSS  24.7
02BB:  GOTO   2C0
02BC:  GOTO   2FA
02BD:  MOVF   1B,W
02BE:  MOVWF  1F
02BF:  GOTO   2CD
02C0:  MOVF   17,W
02C1:  MOVWF  1F
02C2:  MOVF   24,F
02C3:  BTFSS  03.2
02C4:  GOTO   2CD
02C5:  MOVF   23,F
02C6:  BTFSS  03.2
02C7:  GOTO   2CD
02C8:  MOVF   22,F
02C9:  BTFSS  03.2
02CA:  GOTO   2CD
02CB:  CLRF   77
02CC:  GOTO   2EE
02CD:  BTFSC  24.7
02CE:  GOTO   2D7
02CF:  BCF    03.0
02D0:  RLF    21,F
02D1:  RLF    22,F
02D2:  RLF    23,F
02D3:  RLF    24,F
02D4:  DECFSZ 77,F
02D5:  GOTO   2CD
02D6:  GOTO   2F5
02D7:  BTFSS  1F.7
02D8:  GOTO   2DB
02D9:  BSF    24.7
02DA:  GOTO   2EE
02DB:  BCF    24.7
02DC:  GOTO   2EE
02DD:  MOVF   1A,W
02DE:  MOVWF  77
02DF:  MOVF   1B,W
02E0:  MOVWF  24
02E1:  MOVF   1C,W
02E2:  MOVWF  23
02E3:  MOVF   1D,W
02E4:  MOVWF  22
02E5:  GOTO   2EE
02E6:  MOVF   16,W
02E7:  MOVWF  77
02E8:  MOVF   17,W
02E9:  MOVWF  24
02EA:  MOVF   18,W
02EB:  MOVWF  23
02EC:  MOVF   19,W
02ED:  MOVWF  22
02EE:  MOVF   24,W
02EF:  MOVWF  78
02F0:  MOVF   23,W
02F1:  MOVWF  79
02F2:  MOVF   22,W
02F3:  MOVWF  7A
02F4:  GOTO   32D
02F5:  CLRF   77
02F6:  CLRF   78
02F7:  CLRF   79
02F8:  CLRF   7A
02F9:  GOTO   32D
02FA:  CLRF   21
02FB:  COMF   22,F
02FC:  COMF   23,F
02FD:  COMF   24,F
02FE:  COMF   21,F
02FF:  INCF   21,F
0300:  BTFSS  03.2
0301:  GOTO   308
0302:  INCF   22,F
0303:  BTFSS  03.2
0304:  GOTO   308
0305:  INCF   23,F
0306:  BTFSC  03.2
0307:  INCF   24,F
0308:  BTFSC  20.0
0309:  GOTO   216
030A:  BTFSC  20.1
030B:  GOTO   258
030C:  BTFSC  20.2
030D:  GOTO   28E
030E:  GOTO   2BD
030F:  MOVF   00,W
0310:  ADDWF  22,F
0311:  BTFSS  03.0
0312:  GOTO   319
0313:  INCF   23,F
0314:  BTFSS  03.2
0315:  GOTO   319
0316:  INCF   24,F
0317:  BTFSC  03.2
0318:  BSF    1E.0
0319:  DECF   04,F
031A:  MOVF   00,W
031B:  ADDWF  23,F
031C:  BTFSS  03.0
031D:  GOTO   321
031E:  INCF   24,F
031F:  BTFSC  03.2
0320:  BSF    1E.0
0321:  DECF   04,F
0322:  MOVF   00,W
0323:  BTFSS  00.7
0324:  XORLW  80
0325:  ADDWF  24,F
0326:  BTFSC  03.0
0327:  BSF    1E.0
0328:  BTFSC  20.4
0329:  GOTO   21D
032A:  BTFSC  20.5
032B:  GOTO   25F
032C:  GOTO   295
032D:  BCF    03.6
032E:  RETURN
032F:  BSF    03.5
0330:  MOVF   6B,W
0331:  MOVWF  6E
0332:  BCF    03.5
0333:  BSF    03.6
0334:  MOVF   11,W
0335:  BSF    03.5
0336:  BCF    03.6
0337:  XORWF  6E,F
0338:  BTFSS  6E.7
0339:  GOTO   33F
033A:  BCF    03.2
033B:  BCF    03.0
033C:  BTFSC  6B.7
033D:  BSF    03.0
033E:  GOTO   382
033F:  MOVF   6B,W
0340:  MOVWF  6E
0341:  BCF    03.5
0342:  BSF    03.6
0343:  MOVF   10,W
0344:  BSF    03.5
0345:  BCF    03.6
0346:  MOVWF  6F
0347:  MOVF   6A,W
0348:  SUBWF  6F,F
0349:  BTFSC  03.2
034A:  GOTO   351
034B:  BTFSS  6E.7
034C:  GOTO   382
034D:  MOVF   03,W
034E:  XORLW  01
034F:  MOVWF  03
0350:  GOTO   382
0351:  BCF    03.5
0352:  BSF    03.6
0353:  MOVF   11,W
0354:  BSF    03.5
0355:  BCF    03.6
0356:  MOVWF  6F
0357:  MOVF   6B,W
0358:  SUBWF  6F,F
0359:  BTFSC  03.2
035A:  GOTO   361
035B:  BTFSS  6E.7
035C:  GOTO   382
035D:  MOVF   03,W
035E:  XORLW  01
035F:  MOVWF  03
0360:  GOTO   382
0361:  BCF    03.5
0362:  BSF    03.6
0363:  MOVF   12,W
0364:  BSF    03.5
0365:  BCF    03.6
0366:  MOVWF  6F
0367:  MOVF   6C,W
0368:  SUBWF  6F,F
0369:  BTFSC  03.2
036A:  GOTO   371
036B:  BTFSS  6E.7
036C:  GOTO   382
036D:  MOVF   03,W
036E:  XORLW  01
036F:  MOVWF  03
0370:  GOTO   382
0371:  BCF    03.5
0372:  BSF    03.6
0373:  MOVF   13,W
0374:  BSF    03.5
0375:  BCF    03.6
0376:  MOVWF  6F
0377:  MOVF   6D,W
0378:  SUBWF  6F,F
0379:  BTFSC  03.2
037A:  GOTO   381
037B:  BTFSS  6E.7
037C:  GOTO   382
037D:  MOVF   03,W
037E:  XORLW  01
037F:  MOVWF  03
0380:  GOTO   382
0381:  BCF    03.0
0382:  BCF    03.5
0383:  RETURN
*
03DB:  MOVLW  8E
03DC:  MOVWF  77
03DD:  MOVF   68,W
03DE:  SUBWF  77,F
03DF:  MOVF   69,W
03E0:  MOVWF  79
03E1:  MOVF   6A,W
03E2:  MOVWF  78
03E3:  BSF    79.7
03E4:  MOVF   77,F
03E5:  BTFSC  03.2
03E6:  GOTO   3F2
03E7:  BCF    03.0
03E8:  MOVF   79,F
03E9:  BTFSS  03.2
03EA:  GOTO   3EE
03EB:  MOVF   78,F
03EC:  BTFSC  03.2
03ED:  GOTO   3F2
03EE:  RRF    79,F
03EF:  RRF    78,F
03F0:  DECFSZ 77,F
03F1:  GOTO   3E7
03F2:  BTFSS  69.7
03F3:  GOTO   3F9
03F4:  COMF   78,F
03F5:  COMF   79,F
03F6:  INCF   78,F
03F7:  BTFSC  03.2
03F8:  INCF   79,F
*
0416:  MOVLW  8E
0417:  MOVWF  77
0418:  MOVF   68,W
0419:  SUBWF  77,F
041A:  MOVF   69,W
041B:  MOVWF  79
041C:  MOVF   6A,W
041D:  MOVWF  78
041E:  BSF    79.7
041F:  MOVF   77,F
0420:  BTFSC  03.2
0421:  GOTO   42D
0422:  BCF    03.0
0423:  MOVF   79,F
0424:  BTFSS  03.2
0425:  GOTO   429
0426:  MOVF   78,F
0427:  BTFSC  03.2
0428:  GOTO   42D
0429:  RRF    79,F
042A:  RRF    78,F
042B:  DECFSZ 77,F
042C:  GOTO   422
042D:  BTFSS  69.7
042E:  GOTO   434
042F:  COMF   78,F
0430:  COMF   79,F
0431:  INCF   78,F
0432:  BTFSC  03.2
0433:  INCF   79,F
*
06D4:  MOVF   0B,W
06D5:  BSF    03.5
06D6:  MOVWF  2A
06D7:  BCF    03.5
06D8:  BCF    0B.7
06D9:  BSF    03.5
06DA:  BSF    03.6
06DB:  BSF    0C.7
06DC:  BSF    0C.0
06DD:  NOP
06DE:  NOP
06DF:  BCF    03.6
06E0:  BTFSS  2A.7
06E1:  GOTO   6E5
06E2:  BCF    03.5
06E3:  BSF    0B.7
06E4:  BSF    03.5
06E5:  BCF    03.5
06E6:  BSF    03.6
06E7:  MOVF   0C,W
06E8:  ANDLW  7F
06E9:  BTFSC  03.2
06EA:  GOTO   746
06EB:  BSF    03.5
06EC:  BCF    03.6
06ED:  MOVWF  2A
06EE:  BCF    03.5
06EF:  BSF    03.6
06F0:  MOVF   0D,W
06F1:  BSF    03.5
06F2:  BCF    03.6
06F3:  MOVWF  2B
06F4:  BCF    03.5
06F5:  BSF    03.6
06F6:  MOVF   0F,W
06F7:  BSF    03.5
06F8:  BCF    03.6
06F9:  MOVWF  2C
06FA:  MOVF   2A,W
06FB:  MOVWF  39
06FC:  BCF    03.5
06FD:  CALL   68E
06FE:  BSF    03.5
06FF:  MOVF   2B,W
0700:  BCF    03.5
0701:  BSF    03.6
0702:  MOVWF  0D
0703:  BSF    03.5
0704:  BCF    03.6
0705:  MOVF   2C,W
0706:  BCF    03.5
0707:  BSF    03.6
0708:  MOVWF  0F
0709:  BCF    03.6
070A:  MOVF   0B,W
070B:  BSF    03.5
070C:  MOVWF  2D
070D:  BCF    03.5
070E:  BCF    0B.7
070F:  BSF    03.5
0710:  BSF    03.6
0711:  BSF    0C.7
0712:  BSF    0C.0
0713:  NOP
0714:  NOP
0715:  BCF    03.6
0716:  BTFSS  2D.7
0717:  GOTO   71B
0718:  BCF    03.5
0719:  BSF    0B.7
071A:  BSF    03.5
071B:  BCF    03.5
071C:  BSF    03.6
071D:  RLF    0C,W
071E:  RLF    0E,W
071F:  ANDLW  7F
0720:  BTFSC  03.2
0721:  GOTO   746
0722:  BSF    03.5
0723:  BCF    03.6
0724:  MOVWF  2A
0725:  BCF    03.5
0726:  BSF    03.6
0727:  MOVF   0D,W
0728:  BSF    03.5
0729:  BCF    03.6
072A:  MOVWF  2B
072B:  BCF    03.5
072C:  BSF    03.6
072D:  MOVF   0F,W
072E:  BSF    03.5
072F:  BCF    03.6
0730:  MOVWF  2C
0731:  MOVF   2A,W
0732:  MOVWF  39
0733:  BCF    03.5
0734:  CALL   68E
0735:  BSF    03.5
0736:  MOVF   2B,W
0737:  BCF    03.5
0738:  BSF    03.6
0739:  MOVWF  0D
073A:  BSF    03.5
073B:  BCF    03.6
073C:  MOVF   2C,W
073D:  BCF    03.5
073E:  BSF    03.6
073F:  MOVWF  0F
0740:  INCF   0D,F
0741:  BTFSC  03.2
0742:  INCF   0F,F
0743:  BCF    03.6
0744:  GOTO   6D4
0745:  BSF    03.6
0746:  BCF    03.6
0747:  RETURN
*
07BF:  BSF    0A.0
07C0:  BSF    0A.1
07C1:  BSF    0A.2
07C2:  ADDWF  02,F
07C3:  GOTO   784
07C4:  GOTO   78D
07C5:  GOTO   796
07C6:  GOTO   79F
07C7:  GOTO   7A8
07C8:  GOTO   7B1
*
0832:  MOVLW  8E
0833:  MOVWF  77
0834:  MOVF   17,W
0835:  MOVWF  78
0836:  MOVF   16,W
0837:  MOVWF  79
0838:  CLRF   7A
0839:  MOVF   78,F
083A:  BTFSS  03.2
083B:  GOTO   046
083C:  MOVF   79,W
083D:  MOVWF  78
083E:  CLRF   79
083F:  MOVLW  08
0840:  SUBWF  77,F
0841:  MOVF   78,F
0842:  BTFSS  03.2
0843:  GOTO   046
0844:  CLRF   77
0845:  GOTO   04E
0846:  BCF    03.0
0847:  BTFSC  78.7
0848:  GOTO   04D
0849:  RLF    79,F
084A:  RLF    78,F
084B:  DECF   77,F
084C:  GOTO   046
084D:  BCF    78.7
*
0894:  MOVLW  8E
0895:  MOVWF  77
0896:  MOVF   17,W
0897:  MOVWF  78
0898:  MOVF   16,W
0899:  MOVWF  79
089A:  CLRF   7A
089B:  MOVF   78,F
089C:  BTFSS  03.2
089D:  GOTO   0A8
089E:  MOVF   79,W
089F:  MOVWF  78
08A0:  CLRF   79
08A1:  MOVLW  08
08A2:  SUBWF  77,F
08A3:  MOVF   78,F
08A4:  BTFSS  03.2
08A5:  GOTO   0A8
08A6:  CLRF   77
08A7:  GOTO   0B0
08A8:  BCF    03.0
08A9:  BTFSC  78.7
08AA:  GOTO   0AF
08AB:  RLF    79,F
08AC:  RLF    78,F
08AD:  DECF   77,F
08AE:  GOTO   0A8
08AF:  BCF    78.7
*
0C19:  MOVF   04,W
0C1A:  BSF    03.5
0C1B:  MOVWF  31
0C1C:  MOVF   30,W
0C1D:  MOVWF  33
0C1E:  BTFSC  03.2
0C1F:  GOTO   453
0C20:  BCF    03.5
0C21:  CLRF   2B
0C22:  BTFSC  0B.7
0C23:  BSF    2B.7
0C24:  BCF    0B.7
0C25:  BSF    03.5
0C26:  MOVF   2F,W
0C27:  BCF    03.5
0C28:  BSF    03.6
0C29:  MOVWF  1D
0C2A:  BSF    03.5
0C2B:  BCF    03.6
0C2C:  MOVF   2E,W
0C2D:  BCF    03.5
0C2E:  BSF    03.6
0C2F:  MOVWF  1C
0C30:  BSF    03.5
0C31:  BCF    03.6
0C32:  MOVF   2D,W
0C33:  BCF    03.5
0C34:  BSF    03.6
0C35:  MOVWF  1B
0C36:  BSF    03.5
0C37:  BCF    03.6
0C38:  MOVF   2C,W
0C39:  BCF    03.5
0C3A:  BSF    03.6
0C3B:  MOVWF  1A
0C3C:  CLRF   21
0C3D:  CLRF   20
0C3E:  MOVLW  20
0C3F:  MOVWF  1F
0C40:  MOVLW  82
0C41:  MOVWF  1E
0C42:  BCF    0A.3
0C43:  BCF    03.6
0C44:  CALL   0A6
0C45:  BSF    0A.3
0C46:  BTFSC  2B.7
0C47:  BSF    0B.7
0C48:  MOVF   7A,W
0C49:  BSF    03.5
0C4A:  MOVWF  2F
0C4B:  MOVF   79,W
0C4C:  MOVWF  2E
0C4D:  MOVF   78,W
0C4E:  MOVWF  2D
0C4F:  MOVF   77,W
0C50:  MOVWF  2C
0C51:  DECFSZ 33,F
0C52:  GOTO   420
0C53:  MOVF   2F,W
0C54:  MOVWF  3C
0C55:  MOVF   2E,W
0C56:  MOVWF  3B
0C57:  MOVF   2D,W
0C58:  MOVWF  3A
0C59:  MOVF   2C,W
0C5A:  MOVWF  39
0C5B:  MOVF   39,W
0C5C:  SUBLW  B6
0C5D:  MOVWF  39
0C5E:  CLRF   7A
0C5F:  MOVF   3A,W
0C60:  MOVWF  3D
0C61:  BSF    3A.7
0C62:  BCF    03.0
0C63:  RRF    3A,F
0C64:  RRF    3B,F
0C65:  RRF    3C,F
0C66:  RRF    7A,F
0C67:  RRF    79,F
0C68:  RRF    78,F
0C69:  RRF    77,F
0C6A:  DECFSZ 39,F
0C6B:  GOTO   462
0C6C:  BTFSS  3D.7
0C6D:  GOTO   479
0C6E:  COMF   77,F
0C6F:  COMF   78,F
0C70:  COMF   79,F
0C71:  COMF   7A,F
0C72:  INCF   77,F
0C73:  BTFSC  03.2
0C74:  INCF   78,F
0C75:  BTFSC  03.2
0C76:  INCF   79,F
0C77:  BTFSC  03.2
0C78:  INCF   7A,F
0C79:  MOVF   7A,W
0C7A:  MOVWF  2F
0C7B:  MOVF   79,W
0C7C:  MOVWF  2E
0C7D:  MOVF   78,W
0C7E:  MOVWF  2D
0C7F:  MOVF   77,W
0C80:  MOVWF  2C
0C81:  BTFSS  2F.7
0C82:  GOTO   490
0C83:  DECF   31,F
0C84:  BSF    31.5
0C85:  COMF   2C,F
0C86:  COMF   2D,F
0C87:  COMF   2E,F
0C88:  COMF   2F,F
0C89:  INCF   2C,F
0C8A:  BTFSC  03.2
0C8B:  INCF   2D,F
0C8C:  BTFSC  03.2
0C8D:  INCF   2E,F
0C8E:  BTFSC  03.2
0C8F:  INCF   2F,F
0C90:  MOVLW  3B
0C91:  MOVWF  38
0C92:  MOVLW  9A
0C93:  MOVWF  37
0C94:  MOVLW  CA
0C95:  MOVWF  36
0C96:  CLRF   35
0C97:  MOVLW  0A
0C98:  MOVWF  33
0C99:  MOVF   30,W
0C9A:  BTFSC  03.2
0C9B:  INCF   31,F
0C9C:  BSF    03.1
0C9D:  MOVLW  AC
0C9E:  MOVWF  04
0C9F:  BCF    03.7
0CA0:  MOVF   2F,W
0CA1:  MOVWF  3C
0CA2:  MOVF   2E,W
0CA3:  MOVWF  3B
0CA4:  MOVF   2D,W
0CA5:  MOVWF  3A
0CA6:  MOVF   2C,W
0CA7:  MOVWF  39
0CA8:  MOVF   38,W
0CA9:  MOVWF  40
0CAA:  MOVF   37,W
0CAB:  MOVWF  3F
0CAC:  MOVF   36,W
0CAD:  MOVWF  3E
0CAE:  MOVF   35,W
0CAF:  MOVWF  3D
0CB0:  BTFSC  03.1
0CB1:  GOTO   4B5
0CB2:  MOVLW  C1
0CB3:  MOVWF  04
0CB4:  BCF    03.7
0CB5:  CLRF   77
0CB6:  CLRF   78
0CB7:  CLRF   79
0CB8:  CLRF   7A
0CB9:  CLRF   41
0CBA:  CLRF   42
0CBB:  CLRF   43
0CBC:  CLRF   44
0CBD:  MOVF   40,W
0CBE:  IORWF  3F,W
0CBF:  IORWF  3E,W
0CC0:  IORWF  3D,W
0CC1:  BTFSC  03.2
0CC2:  GOTO   4F3
0CC3:  MOVLW  20
0CC4:  MOVWF  45
0CC5:  BCF    03.0
0CC6:  RLF    39,F
0CC7:  RLF    3A,F
0CC8:  RLF    3B,F
0CC9:  RLF    3C,F
0CCA:  RLF    41,F
0CCB:  RLF    42,F
0CCC:  RLF    43,F
0CCD:  RLF    44,F
0CCE:  MOVF   40,W
0CCF:  SUBWF  44,W
0CD0:  BTFSS  03.2
0CD1:  GOTO   4DC
0CD2:  MOVF   3F,W
0CD3:  SUBWF  43,W
0CD4:  BTFSS  03.2
0CD5:  GOTO   4DC
0CD6:  MOVF   3E,W
0CD7:  SUBWF  42,W
0CD8:  BTFSS  03.2
0CD9:  GOTO   4DC
0CDA:  MOVF   3D,W
0CDB:  SUBWF  41,W
0CDC:  BTFSS  03.0
0CDD:  GOTO   4ED
0CDE:  MOVF   3D,W
0CDF:  SUBWF  41,F
0CE0:  MOVF   3E,W
0CE1:  BTFSS  03.0
0CE2:  INCFSZ 3E,W
0CE3:  SUBWF  42,F
0CE4:  MOVF   3F,W
0CE5:  BTFSS  03.0
0CE6:  INCFSZ 3F,W
0CE7:  SUBWF  43,F
0CE8:  MOVF   40,W
0CE9:  BTFSS  03.0
0CEA:  INCFSZ 40,W
0CEB:  SUBWF  44,F
0CEC:  BSF    03.0
0CED:  RLF    77,F
0CEE:  RLF    78,F
0CEF:  RLF    79,F
0CF0:  RLF    7A,F
0CF1:  DECFSZ 45,F
0CF2:  GOTO   4C5
0CF3:  MOVF   41,W
0CF4:  MOVWF  00
0CF5:  INCF   04,F
0CF6:  MOVF   42,W
0CF7:  MOVWF  00
0CF8:  INCF   04,F
0CF9:  MOVF   43,W
0CFA:  MOVWF  00
0CFB:  INCF   04,F
0CFC:  MOVF   44,W
0CFD:  MOVWF  00
0CFE:  MOVF   78,W
0CFF:  MOVF   77,F
0D00:  BTFSS  03.2
0D01:  GOTO   515
0D02:  INCF   30,W
0D03:  SUBWF  33,W
0D04:  BTFSC  03.2
0D05:  GOTO   515
0D06:  MOVF   31,W
0D07:  BTFSC  03.2
0D08:  GOTO   517
0D09:  ANDLW  0F
0D0A:  SUBWF  33,W
0D0B:  BTFSC  03.2
0D0C:  GOTO   50F
0D0D:  BTFSC  03.0
0D0E:  GOTO   557
0D0F:  BTFSC  31.7
0D10:  GOTO   557
0D11:  BTFSC  31.6
0D12:  GOTO   517
0D13:  MOVLW  20
0D14:  GOTO   54F
0D15:  MOVLW  20
0D16:  ANDWF  31,F
0D17:  BTFSS  31.5
0D18:  GOTO   529
0D19:  BCF    31.5
0D1A:  MOVF   30,W
0D1B:  BTFSS  03.2
0D1C:  DECF   31,F
0D1D:  MOVF   77,W
0D1E:  MOVWF  31
0D1F:  MOVLW  2D
0D20:  MOVWF  39
0D21:  BCF    0A.3
0D22:  BCF    03.5
0D23:  CALL   68E
0D24:  BSF    0A.3
0D25:  BSF    03.5
0D26:  MOVF   31,W
0D27:  MOVWF  77
0D28:  CLRF   31
0D29:  MOVF   30,W
0D2A:  SUBWF  33,W
0D2B:  BTFSS  03.2
0D2C:  GOTO   53B
0D2D:  MOVF   77,W
0D2E:  MOVWF  31
0D2F:  MOVLW  2E
0D30:  MOVWF  39
0D31:  BCF    0A.3
0D32:  BCF    03.5
0D33:  CALL   68E
0D34:  BSF    0A.3
0D35:  BSF    03.5
0D36:  MOVF   31,W
0D37:  MOVWF  77
0D38:  MOVLW  20
0D39:  ANDWF  31,F
0D3A:  MOVLW  00
0D3B:  MOVLW  30
0D3C:  BTFSS  31.5
0D3D:  GOTO   54F
0D3E:  BCF    31.5
0D3F:  MOVF   30,W
0D40:  BTFSS  03.2
0D41:  DECF   31,F
0D42:  MOVF   77,W
0D43:  MOVWF  31
0D44:  MOVLW  2D
0D45:  MOVWF  39
0D46:  BCF    0A.3
0D47:  BCF    03.5
0D48:  CALL   68E
0D49:  BSF    0A.3
0D4A:  BSF    03.5
0D4B:  MOVF   31,W
0D4C:  MOVWF  77
0D4D:  CLRF   31
0D4E:  MOVLW  30
0D4F:  ADDWF  77,F
0D50:  MOVF   77,W
0D51:  MOVWF  39
0D52:  BCF    0A.3
0D53:  BCF    03.5
0D54:  CALL   68E
0D55:  BSF    0A.3
0D56:  BSF    03.5
0D57:  BCF    03.1
0D58:  MOVF   38,W
0D59:  MOVWF  3C
0D5A:  MOVF   37,W
0D5B:  MOVWF  3B
0D5C:  MOVF   36,W
0D5D:  MOVWF  3A
0D5E:  MOVF   35,W
0D5F:  MOVWF  39
0D60:  CLRF   40
0D61:  CLRF   3F
0D62:  CLRF   3E
0D63:  MOVLW  0A
0D64:  MOVWF  3D
0D65:  BTFSC  03.1
0D66:  GOTO   56A
0D67:  MOVLW  C1
0D68:  MOVWF  04
0D69:  BCF    03.7
0D6A:  CLRF   77
0D6B:  CLRF   78
0D6C:  CLRF   79
0D6D:  CLRF   7A
0D6E:  CLRF   41
0D6F:  CLRF   42
0D70:  CLRF   43
0D71:  CLRF   44
0D72:  MOVF   40,W
0D73:  IORWF  3F,W
0D74:  IORWF  3E,W
0D75:  IORWF  3D,W
0D76:  BTFSC  03.2
0D77:  GOTO   5A8
0D78:  MOVLW  20
0D79:  MOVWF  45
0D7A:  BCF    03.0
0D7B:  RLF    39,F
0D7C:  RLF    3A,F
0D7D:  RLF    3B,F
0D7E:  RLF    3C,F
0D7F:  RLF    41,F
0D80:  RLF    42,F
0D81:  RLF    43,F
0D82:  RLF    44,F
0D83:  MOVF   40,W
0D84:  SUBWF  44,W
0D85:  BTFSS  03.2
0D86:  GOTO   591
0D87:  MOVF   3F,W
0D88:  SUBWF  43,W
0D89:  BTFSS  03.2
0D8A:  GOTO   591
0D8B:  MOVF   3E,W
0D8C:  SUBWF  42,W
0D8D:  BTFSS  03.2
0D8E:  GOTO   591
0D8F:  MOVF   3D,W
0D90:  SUBWF  41,W
0D91:  BTFSS  03.0
0D92:  GOTO   5A2
0D93:  MOVF   3D,W
0D94:  SUBWF  41,F
0D95:  MOVF   3E,W
0D96:  BTFSS  03.0
0D97:  INCFSZ 3E,W
0D98:  SUBWF  42,F
0D99:  MOVF   3F,W
0D9A:  BTFSS  03.0
0D9B:  INCFSZ 3F,W
0D9C:  SUBWF  43,F
0D9D:  MOVF   40,W
0D9E:  BTFSS  03.0
0D9F:  INCFSZ 40,W
0DA0:  SUBWF  44,F
0DA1:  BSF    03.0
0DA2:  RLF    77,F
0DA3:  RLF    78,F
0DA4:  RLF    79,F
0DA5:  RLF    7A,F
0DA6:  DECFSZ 45,F
0DA7:  GOTO   57A
0DA8:  MOVF   41,W
0DA9:  MOVWF  00
0DAA:  INCF   04,F
0DAB:  MOVF   42,W
0DAC:  MOVWF  00
0DAD:  INCF   04,F
0DAE:  MOVF   43,W
0DAF:  MOVWF  00
0DB0:  INCF   04,F
0DB1:  MOVF   44,W
0DB2:  MOVWF  00
0DB3:  MOVF   7A,W
0DB4:  MOVWF  38
0DB5:  MOVF   79,W
0DB6:  MOVWF  37
0DB7:  MOVF   78,W
0DB8:  MOVWF  36
0DB9:  MOVF   77,W
0DBA:  MOVWF  35
0DBB:  DECFSZ 33,F
0DBC:  GOTO   49C
0DBD:  BCF    03.5
0DBE:  RETURN
*
14C1:  MOVLW  8E
14C2:  MOVWF  77
14C3:  MOVF   17,W
14C4:  MOVWF  78
14C5:  MOVF   16,W
14C6:  MOVWF  79
14C7:  CLRF   7A
14C8:  MOVF   78,F
14C9:  BTFSS  03.2
14CA:  GOTO   4D5
14CB:  MOVF   79,W
14CC:  MOVWF  78
14CD:  CLRF   79
14CE:  MOVLW  08
14CF:  SUBWF  77,F
14D0:  MOVF   78,F
14D1:  BTFSS  03.2
14D2:  GOTO   4D5
14D3:  CLRF   77
14D4:  GOTO   4DD
14D5:  BCF    03.0
14D6:  BTFSC  78.7
14D7:  GOTO   4DC
14D8:  RLF    79,F
14D9:  RLF    78,F
14DA:  DECF   77,F
14DB:  GOTO   4D5
14DC:  BCF    78.7
*
1557:  MOVLW  8E
1558:  MOVWF  77
1559:  MOVF   17,W
155A:  MOVWF  78
155B:  MOVF   16,W
155C:  MOVWF  79
155D:  CLRF   7A
155E:  MOVF   78,F
155F:  BTFSS  03.2
1560:  GOTO   56B
1561:  MOVF   79,W
1562:  MOVWF  78
1563:  CLRF   79
1564:  MOVLW  08
1565:  SUBWF  77,F
1566:  MOVF   78,F
1567:  BTFSS  03.2
1568:  GOTO   56B
1569:  CLRF   77
156A:  GOTO   573
156B:  BCF    03.0
156C:  BTFSC  78.7
156D:  GOTO   572
156E:  RLF    79,F
156F:  RLF    78,F
1570:  DECF   77,F
1571:  GOTO   56B
1572:  BCF    78.7
*
15F1:  BCF    03.5
15F2:  MOVF   0B,W
15F3:  BSF    03.5
15F4:  MOVWF  2D
15F5:  BCF    03.5
15F6:  BCF    0B.7
15F7:  BSF    03.5
15F8:  BSF    03.6
15F9:  BSF    0C.7
15FA:  BSF    0C.0
15FB:  NOP
15FC:  NOP
15FD:  BCF    03.6
15FE:  BTFSS  2D.7
15FF:  GOTO   603
1600:  BCF    03.5
1601:  BSF    0B.7
1602:  BSF    03.5
1603:  BTFSC  03.0
1604:  GOTO   63E
1605:  BCF    03.5
1606:  BSF    03.6
1607:  MOVF   0C,W
1608:  ANDLW  7F
1609:  BSF    03.5
160A:  BCF    03.6
160B:  MOVWF  2D
160C:  BCF    03.5
160D:  BSF    03.6
160E:  MOVF   0D,W
160F:  BSF    03.5
1610:  BCF    03.6
1611:  MOVWF  2E
1612:  BCF    03.5
1613:  BSF    03.6
1614:  MOVF   0F,W
1615:  BSF    03.5
1616:  BCF    03.6
1617:  MOVWF  2F
1618:  MOVF   2D,W
1619:  MOVWF  39
161A:  BCF    0A.4
161B:  BCF    03.5
161C:  CALL   68E
161D:  BSF    0A.4
161E:  BSF    03.5
161F:  MOVF   2E,W
1620:  BCF    03.5
1621:  BSF    03.6
1622:  MOVWF  0D
1623:  BSF    03.5
1624:  BCF    03.6
1625:  MOVF   2F,W
1626:  BCF    03.5
1627:  BSF    03.6
1628:  MOVWF  0F
1629:  BCF    03.6
162A:  MOVF   0B,W
162B:  BSF    03.5
162C:  MOVWF  30
162D:  BCF    03.5
162E:  BCF    0B.7
162F:  BSF    03.5
1630:  BSF    03.6
1631:  BSF    0C.7
1632:  BSF    0C.0
1633:  NOP
1634:  NOP
1635:  BCF    03.6
1636:  BTFSS  30.7
1637:  GOTO   63B
1638:  BCF    03.5
1639:  BSF    0B.7
163A:  BSF    03.5
163B:  DECFSZ 2C,F
163C:  GOTO   63E
163D:  GOTO   66B
163E:  BCF    03.5
163F:  BSF    03.6
1640:  RLF    0C,W
1641:  RLF    0E,W
1642:  ANDLW  7F
1643:  BSF    03.5
1644:  BCF    03.6
1645:  MOVWF  2D
1646:  BCF    03.5
1647:  BSF    03.6
1648:  MOVF   0D,W
1649:  BSF    03.5
164A:  BCF    03.6
164B:  MOVWF  2E
164C:  BCF    03.5
164D:  BSF    03.6
164E:  MOVF   0F,W
164F:  BSF    03.5
1650:  BCF    03.6
1651:  MOVWF  2F
1652:  MOVF   2D,W
1653:  MOVWF  39
1654:  BCF    0A.4
1655:  BCF    03.5
1656:  CALL   68E
1657:  BSF    0A.4
1658:  BSF    03.5
1659:  MOVF   2E,W
165A:  BCF    03.5
165B:  BSF    03.6
165C:  MOVWF  0D
165D:  BSF    03.5
165E:  BCF    03.6
165F:  MOVF   2F,W
1660:  BCF    03.5
1661:  BSF    03.6
1662:  MOVWF  0F
1663:  INCF   0D,F
1664:  BTFSC  03.2
1665:  INCF   0F,F
1666:  BCF    03.0
1667:  BSF    03.5
1668:  BCF    03.6
1669:  DECFSZ 2C,F
166A:  GOTO   5F1
*
1686:  BCF    03.5
1687:  MOVF   0B,W
1688:  BSF    03.5
1689:  MOVWF  2D
168A:  BCF    03.5
168B:  BCF    0B.7
168C:  BSF    03.5
168D:  BSF    03.6
168E:  BSF    0C.7
168F:  BSF    0C.0
1690:  NOP
1691:  NOP
1692:  BCF    03.6
1693:  BTFSS  2D.7
1694:  GOTO   698
1695:  BCF    03.5
1696:  BSF    0B.7
1697:  BSF    03.5
1698:  BTFSC  03.0
1699:  GOTO   6D3
169A:  BCF    03.5
169B:  BSF    03.6
169C:  MOVF   0C,W
169D:  ANDLW  7F
169E:  BSF    03.5
169F:  BCF    03.6
16A0:  MOVWF  2D
16A1:  BCF    03.5
16A2:  BSF    03.6
16A3:  MOVF   0D,W
16A4:  BSF    03.5
16A5:  BCF    03.6
16A6:  MOVWF  2E
16A7:  BCF    03.5
16A8:  BSF    03.6
16A9:  MOVF   0F,W
16AA:  BSF    03.5
16AB:  BCF    03.6
16AC:  MOVWF  2F
16AD:  MOVF   2D,W
16AE:  MOVWF  39
16AF:  BCF    0A.4
16B0:  BCF    03.5
16B1:  CALL   68E
16B2:  BSF    0A.4
16B3:  BSF    03.5
16B4:  MOVF   2E,W
16B5:  BCF    03.5
16B6:  BSF    03.6
16B7:  MOVWF  0D
16B8:  BSF    03.5
16B9:  BCF    03.6
16BA:  MOVF   2F,W
16BB:  BCF    03.5
16BC:  BSF    03.6
16BD:  MOVWF  0F
16BE:  BCF    03.6
16BF:  MOVF   0B,W
16C0:  BSF    03.5
16C1:  MOVWF  30
16C2:  BCF    03.5
16C3:  BCF    0B.7
16C4:  BSF    03.5
16C5:  BSF    03.6
16C6:  BSF    0C.7
16C7:  BSF    0C.0
16C8:  NOP
16C9:  NOP
16CA:  BCF    03.6
16CB:  BTFSS  30.7
16CC:  GOTO   6D0
16CD:  BCF    03.5
16CE:  BSF    0B.7
16CF:  BSF    03.5
16D0:  DECFSZ 2C,F
16D1:  GOTO   6D3
16D2:  GOTO   700
16D3:  BCF    03.5
16D4:  BSF    03.6
16D5:  RLF    0C,W
16D6:  RLF    0E,W
16D7:  ANDLW  7F
16D8:  BSF    03.5
16D9:  BCF    03.6
16DA:  MOVWF  2D
16DB:  BCF    03.5
16DC:  BSF    03.6
16DD:  MOVF   0D,W
16DE:  BSF    03.5
16DF:  BCF    03.6
16E0:  MOVWF  2E
16E1:  BCF    03.5
16E2:  BSF    03.6
16E3:  MOVF   0F,W
16E4:  BSF    03.5
16E5:  BCF    03.6
16E6:  MOVWF  2F
16E7:  MOVF   2D,W
16E8:  MOVWF  39
16E9:  BCF    0A.4
16EA:  BCF    03.5
16EB:  CALL   68E
16EC:  BSF    0A.4
16ED:  BSF    03.5
16EE:  MOVF   2E,W
16EF:  BCF    03.5
16F0:  BSF    03.6
16F1:  MOVWF  0D
16F2:  BSF    03.5
16F3:  BCF    03.6
16F4:  MOVF   2F,W
16F5:  BCF    03.5
16F6:  BSF    03.6
16F7:  MOVWF  0F
16F8:  INCF   0D,F
16F9:  BTFSC  03.2
16FA:  INCF   0F,F
16FB:  BCF    03.0
16FC:  BSF    03.5
16FD:  BCF    03.6
16FE:  DECFSZ 2C,F
16FF:  GOTO   686
*
1904:  MOVLW  8E
1905:  MOVWF  77
1906:  MOVF   68,W
1907:  SUBWF  77,F
1908:  MOVF   69,W
1909:  MOVWF  79
190A:  MOVF   6A,W
190B:  MOVWF  78
190C:  BSF    79.7
190D:  MOVF   77,F
190E:  BTFSC  03.2
190F:  GOTO   11B
1910:  BCF    03.0
1911:  MOVF   79,F
1912:  BTFSS  03.2
1913:  GOTO   117
1914:  MOVF   78,F
1915:  BTFSC  03.2
1916:  GOTO   11B
1917:  RRF    79,F
1918:  RRF    78,F
1919:  DECFSZ 77,F
191A:  GOTO   110
191B:  BTFSS  69.7
191C:  GOTO   122
191D:  COMF   78,F
191E:  COMF   79,F
191F:  INCF   78,F
1920:  BTFSC  03.2
1921:  INCF   79,F
*
1926:  MOVF   52,W
1927:  CLRF   78
1928:  SUBWF  51,W
1929:  BTFSC  03.0
192A:  GOTO   12E
192B:  MOVF   51,W
192C:  MOVWF  77
192D:  GOTO   13A
192E:  CLRF   77
192F:  MOVLW  08
1930:  MOVWF  53
1931:  RLF    51,F
1932:  RLF    77,F
1933:  MOVF   52,W
1934:  SUBWF  77,W
1935:  BTFSC  03.0
1936:  MOVWF  77
1937:  RLF    78,F
1938:  DECFSZ 53,F
1939:  GOTO   131
*
1986:  MOVLW  8E
1987:  MOVWF  77
1988:  MOVF   68,W
1989:  SUBWF  77,F
198A:  MOVF   69,W
198B:  MOVWF  79
198C:  MOVF   6A,W
198D:  MOVWF  78
198E:  BSF    79.7
198F:  MOVF   77,F
1990:  BTFSC  03.2
1991:  GOTO   19D
1992:  BCF    03.0
1993:  MOVF   79,F
1994:  BTFSS  03.2
1995:  GOTO   199
1996:  MOVF   78,F
1997:  BTFSC  03.2
1998:  GOTO   19D
1999:  RRF    79,F
199A:  RRF    78,F
199B:  DECFSZ 77,F
199C:  GOTO   192
199D:  BTFSS  69.7
199E:  GOTO   1A4
199F:  COMF   78,F
19A0:  COMF   79,F
19A1:  INCF   78,F
19A2:  BTFSC  03.2
19A3:  INCF   79,F
*
19A8:  MOVF   52,W
19A9:  CLRF   78
19AA:  SUBWF  51,W
19AB:  BTFSC  03.0
19AC:  GOTO   1B0
19AD:  MOVF   51,W
19AE:  MOVWF  77
19AF:  GOTO   1BC
19B0:  CLRF   77
19B1:  MOVLW  08
19B2:  MOVWF  53
19B3:  RLF    51,F
19B4:  RLF    77,F
19B5:  MOVF   52,W
19B6:  SUBWF  77,W
19B7:  BTFSC  03.0
19B8:  MOVWF  77
19B9:  RLF    78,F
19BA:  DECFSZ 53,F
19BB:  GOTO   1B3
*
1A3F:  MOVLW  8E
1A40:  MOVWF  77
1A41:  MOVF   68,W
1A42:  SUBWF  77,F
1A43:  MOVF   69,W
1A44:  MOVWF  79
1A45:  MOVF   6A,W
1A46:  MOVWF  78
1A47:  BSF    79.7
1A48:  MOVF   77,F
1A49:  BTFSC  03.2
1A4A:  GOTO   256
1A4B:  BCF    03.0
1A4C:  MOVF   79,F
1A4D:  BTFSS  03.2
1A4E:  GOTO   252
1A4F:  MOVF   78,F
1A50:  BTFSC  03.2
1A51:  GOTO   256
1A52:  RRF    79,F
1A53:  RRF    78,F
1A54:  DECFSZ 77,F
1A55:  GOTO   24B
1A56:  BTFSS  69.7
1A57:  GOTO   25D
1A58:  COMF   78,F
1A59:  COMF   79,F
1A5A:  INCF   78,F
1A5B:  BTFSC  03.2
1A5C:  INCF   79,F
*
1AF4:  BCF    03.5
1AF5:  MOVF   0B,W
1AF6:  BSF    03.5
1AF7:  MOVWF  2D
1AF8:  BCF    03.5
1AF9:  BCF    0B.7
1AFA:  BSF    03.5
1AFB:  BSF    03.6
1AFC:  BSF    0C.7
1AFD:  BSF    0C.0
1AFE:  NOP
1AFF:  NOP
1B00:  BCF    03.6
1B01:  BTFSS  2D.7
1B02:  GOTO   306
1B03:  BCF    03.5
1B04:  BSF    0B.7
1B05:  BSF    03.5
1B06:  BTFSC  03.0
1B07:  GOTO   343
1B08:  BCF    03.5
1B09:  BSF    03.6
1B0A:  MOVF   0C,W
1B0B:  ANDLW  7F
1B0C:  BSF    03.5
1B0D:  BCF    03.6
1B0E:  MOVWF  2D
1B0F:  BCF    03.5
1B10:  BSF    03.6
1B11:  MOVF   0D,W
1B12:  BSF    03.5
1B13:  BCF    03.6
1B14:  MOVWF  2E
1B15:  BCF    03.5
1B16:  BSF    03.6
1B17:  MOVF   0F,W
1B18:  BSF    03.5
1B19:  BCF    03.6
1B1A:  MOVWF  2F
1B1B:  MOVF   2D,W
1B1C:  MOVWF  39
1B1D:  BCF    0A.4
1B1E:  BCF    0A.3
1B1F:  BCF    03.5
1B20:  CALL   68E
1B21:  BSF    0A.4
1B22:  BSF    0A.3
1B23:  BSF    03.5
1B24:  MOVF   2E,W
1B25:  BCF    03.5
1B26:  BSF    03.6
1B27:  MOVWF  0D
1B28:  BSF    03.5
1B29:  BCF    03.6
1B2A:  MOVF   2F,W
1B2B:  BCF    03.5
1B2C:  BSF    03.6
1B2D:  MOVWF  0F
1B2E:  BCF    03.6
1B2F:  MOVF   0B,W
1B30:  BSF    03.5
1B31:  MOVWF  30
1B32:  BCF    03.5
1B33:  BCF    0B.7
1B34:  BSF    03.5
1B35:  BSF    03.6
1B36:  BSF    0C.7
1B37:  BSF    0C.0
1B38:  NOP
1B39:  NOP
1B3A:  BCF    03.6
1B3B:  BTFSS  30.7
1B3C:  GOTO   340
1B3D:  BCF    03.5
1B3E:  BSF    0B.7
1B3F:  BSF    03.5
1B40:  DECFSZ 2C,F
1B41:  GOTO   343
1B42:  GOTO   372
1B43:  BCF    03.5
1B44:  BSF    03.6
1B45:  RLF    0C,W
1B46:  RLF    0E,W
1B47:  ANDLW  7F
1B48:  BSF    03.5
1B49:  BCF    03.6
1B4A:  MOVWF  2D
1B4B:  BCF    03.5
1B4C:  BSF    03.6
1B4D:  MOVF   0D,W
1B4E:  BSF    03.5
1B4F:  BCF    03.6
1B50:  MOVWF  2E
1B51:  BCF    03.5
1B52:  BSF    03.6
1B53:  MOVF   0F,W
1B54:  BSF    03.5
1B55:  BCF    03.6
1B56:  MOVWF  2F
1B57:  MOVF   2D,W
1B58:  MOVWF  39
1B59:  BCF    0A.4
1B5A:  BCF    0A.3
1B5B:  BCF    03.5
1B5C:  CALL   68E
1B5D:  BSF    0A.4
1B5E:  BSF    0A.3
1B5F:  BSF    03.5
1B60:  MOVF   2E,W
1B61:  BCF    03.5
1B62:  BSF    03.6
1B63:  MOVWF  0D
1B64:  BSF    03.5
1B65:  BCF    03.6
1B66:  MOVF   2F,W
1B67:  BCF    03.5
1B68:  BSF    03.6
1B69:  MOVWF  0F
1B6A:  INCF   0D,F
1B6B:  BTFSC  03.2
1B6C:  INCF   0F,F
1B6D:  BCF    03.0
1B6E:  BSF    03.5
1B6F:  BCF    03.6
1B70:  DECFSZ 2C,F
1B71:  GOTO   2F4
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
....................  
.................... #use delay(crystal=20000000) 
....................  
....................  
.................... #include <lcd.h> 
.................... #define _lcd_h_ 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(clock=20M) 
*
0593:  MOVLW  BA
0594:  MOVWF  04
0595:  BCF    03.7
0596:  MOVF   00,W
0597:  BTFSC  03.2
0598:  GOTO   5A6
0599:  MOVLW  06
059A:  MOVWF  78
059B:  CLRF   77
059C:  DECFSZ 77,F
059D:  GOTO   59C
059E:  DECFSZ 78,F
059F:  GOTO   59B
05A0:  MOVLW  7B
05A1:  MOVWF  77
05A2:  DECFSZ 77,F
05A3:  GOTO   5A2
05A4:  DECFSZ 00,F
05A5:  GOTO   599
*
05E7:  MOVLW  BA
05E8:  MOVWF  04
05E9:  BCF    03.7
05EA:  MOVF   00,W
05EB:  BTFSC  03.2
05EC:  GOTO   5FA
05ED:  MOVLW  06
05EE:  MOVWF  78
05EF:  CLRF   77
05F0:  DECFSZ 77,F
05F1:  GOTO   5F0
05F2:  DECFSZ 78,F
05F3:  GOTO   5EF
05F4:  MOVLW  7B
05F5:  MOVWF  77
05F6:  DECFSZ 77,F
05F7:  GOTO   5F6
05F8:  DECFSZ 00,F
05F9:  GOTO   5ED
*
06A4:  MOVLW  BA
06A5:  MOVWF  04
06A6:  BCF    03.7
06A7:  MOVF   00,W
06A8:  BTFSC  03.2
06A9:  GOTO   6B7
06AA:  MOVLW  06
06AB:  MOVWF  78
06AC:  CLRF   77
06AD:  DECFSZ 77,F
06AE:  GOTO   6AD
06AF:  DECFSZ 78,F
06B0:  GOTO   6AC
06B1:  MOVLW  7B
06B2:  MOVWF  77
06B3:  DECFSZ 77,F
06B4:  GOTO   6B3
06B5:  DECFSZ 00,F
06B6:  GOTO   6AA
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD. 
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD. 
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... // Khai bao bien. 
.................... // Dinh nghia cac thong so. 
.................... #define LCD_RS_PIN         PIN_E0   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN         PIN_E1 
.................... #define LCD_ENABLE_PIN     PIN_E2 
.................... #define LCD_DATA4          PIN_D4 
.................... #define LCD_DATA5          PIN_D5 
.................... #define LCD_DATA6          PIN_D6 
.................... #define LCD_DATA7          PIN_D7 
.................... //! 
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_C1 
.................... //!#define LCD_ENABLE_PIN     PIN_C2 
.................... //!#define LCD_DATA4          PIN_C3 
.................... //!#define LCD_DATA5          PIN_C4 
.................... //!#define LCD_DATA6          PIN_C5 
.................... //!#define LCD_DATA7          PIN_C6 
....................  
.................... /* 
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7   
.................... */ 
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN. 
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN) 
....................  
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN. 
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN) 
....................  
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN 
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN) 
....................  
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1. 
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2. 
.................... #define lcd_line_three   0x14 
.................... #define lcd_line_four   0x54 
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines 
....................  
.................... // Dinh nghia cac hang so. 
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06}; 
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD. 
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F). 
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font). 
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7. 
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10. 
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7. 
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro). 
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink). 
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong. 
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi). 
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift). 
....................       // Byte 5: .... - Doi con tro / hien thi. 
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left). 
....................  
.................... // *************************************************** 
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte i; 
.................... // Dinh nghia ham. 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra. 
*
057D:  BSF    03.5
057E:  BCF    08.4
.................... output_drive(LCD_DATA5); 
057F:  BCF    08.5
.................... output_drive(LCD_DATA6); 
0580:  BCF    08.6
.................... output_drive(LCD_DATA7); 
0581:  BCF    08.7
....................  
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra. 
0582:  BCF    09.2
.................... lcd_rs_tris(); 
0583:  BCF    09.0
.................... lcd_rw_tris(); 
0584:  BCF    09.1
....................  
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
0585:  BCF    03.5
0586:  BCF    09.0
0587:  BSF    03.5
0588:  BCF    09.0
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD. 
0589:  BCF    03.5
058A:  BCF    09.1
058B:  BSF    03.5
058C:  BCF    09.1
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
058D:  BCF    03.5
058E:  BCF    09.2
058F:  BSF    03.5
0590:  BCF    09.2
....................  
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon). 
0591:  MOVLW  0F
0592:  MOVWF  3A
....................  
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep 
*
05A6:  MOVLW  01
05A7:  MOVWF  26
05A8:  MOVF   26,W
05A9:  SUBLW  03
05AA:  BTFSS  03.0
05AB:  GOTO   5FC
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong  
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham). 
05AC:  MOVLW  03
05AD:  MOVWF  41
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit). 
*
05E5:  MOVLW  05
05E6:  MOVWF  3A
*
05FA:  INCF   26,F
05FB:  GOTO   5A8
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai  
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat). 
....................  
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi 
05FC:  MOVLW  02
05FD:  MOVWF  41
....................                      // ra truoc tien, sau do la 4 bit thap. 
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit). 
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay. 
....................  
.................... for(i=0;i<=3;i++) 
*
0635:  CLRF   26
0636:  MOVF   26,W
0637:  SUBLW  03
0638:  BTFSS  03.0
0639:  GOTO   647
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
063A:  MOVF   26,W
063B:  BCF    03.5
063C:  CALL   05F
063D:  BSF    03.5
063E:  MOVWF  27
063F:  CLRF   3E
0640:  MOVF   27,W
0641:  MOVWF  3F
0642:  BCF    03.5
0643:  CALL   45B
0644:  BSF    03.5
0645:  INCF   26,F
0646:  GOTO   636
0647:  BCF    03.5
0648:  BSF    0A.3
0649:  BCF    0A.4
064A:  GOTO   5EF (RETURN)
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD. 
....................  
.................... // *************************************************** 
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte low,high; 
.................... // Dinh nghia ham. 
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao. 
*
045E:  BSF    08.4
.................... output_float(LCD_DATA5); 
045F:  BSF    08.5
.................... output_float(LCD_DATA6); 
0460:  BSF    08.6
.................... output_float(LCD_DATA7); 
0461:  BSF    08.7
....................  
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD. 
0462:  BCF    03.5
0463:  BSF    09.1
0464:  BSF    03.5
0465:  BCF    09.1
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0466:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
0467:  BCF    03.5
0468:  BSF    09.2
0469:  BSF    03.5
046A:  BCF    09.2
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
046B:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao). 
*
049C:  MOVF   78,W
049D:  MOVWF  41
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
049E:  BCF    03.5
049F:  BCF    09.2
04A0:  BSF    03.5
04A1:  BCF    09.2
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
04A2:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
04A3:  BCF    03.5
04A4:  BSF    09.2
04A5:  BSF    03.5
04A6:  BCF    09.2
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
04A7:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap). 
*
04D8:  MOVF   78,W
04D9:  MOVWF  40
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
04DA:  BCF    03.5
04DB:  BCF    09.2
04DC:  BSF    03.5
04DD:  BCF    09.2
....................  
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra. 
04DE:  BCF    08.4
.................... output_drive(LCD_DATA5); 
04DF:  BCF    08.5
.................... output_drive(LCD_DATA6); 
04E0:  BCF    08.6
.................... output_drive(LCD_DATA7); 
04E1:  BCF    08.7
....................  
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit). 
04E2:  SWAPF  41,W
04E3:  MOVWF  77
04E4:  MOVLW  F0
04E5:  ANDWF  77,F
04E6:  MOVF   77,W
04E7:  IORWF  40,W
04E8:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
*
046C:  CLRF   42
*
04A8:  CLRF   42
.................... { 
.................... // Khai bao bien. 
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin. 
.................... // Dinh nghia ham. 
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu. 
*
046D:  BSF    08.4
046E:  MOVLW  00
046F:  BCF    03.5
0470:  BTFSC  08.4
0471:  MOVLW  01
0472:  BSF    03.5
0473:  IORWF  42,F
*
04A9:  BSF    08.4
04AA:  MOVLW  00
04AB:  BCF    03.5
04AC:  BTFSC  08.4
04AD:  MOVLW  01
04AE:  BSF    03.5
04AF:  IORWF  42,F
.................... n |= input(LCD_DATA5) << 1; 
*
0474:  BSF    08.5
0475:  MOVLW  00
0476:  BCF    03.5
0477:  BTFSC  08.5
0478:  MOVLW  01
0479:  MOVWF  77
047A:  BCF    03.0
047B:  RLF    77,F
047C:  MOVF   77,W
047D:  BSF    03.5
047E:  IORWF  42,F
*
04B0:  BSF    08.5
04B1:  MOVLW  00
04B2:  BCF    03.5
04B3:  BTFSC  08.5
04B4:  MOVLW  01
04B5:  MOVWF  77
04B6:  BCF    03.0
04B7:  RLF    77,F
04B8:  MOVF   77,W
04B9:  BSF    03.5
04BA:  IORWF  42,F
.................... n |= input(LCD_DATA6) << 2; 
*
047F:  BSF    08.6
0480:  MOVLW  00
0481:  BCF    03.5
0482:  BTFSC  08.6
0483:  MOVLW  01
0484:  MOVWF  77
0485:  RLF    77,F
0486:  RLF    77,F
0487:  MOVLW  FC
0488:  ANDWF  77,F
0489:  MOVF   77,W
048A:  BSF    03.5
048B:  IORWF  42,F
*
04BB:  BSF    08.6
04BC:  MOVLW  00
04BD:  BCF    03.5
04BE:  BTFSC  08.6
04BF:  MOVLW  01
04C0:  MOVWF  77
04C1:  RLF    77,F
04C2:  RLF    77,F
04C3:  MOVLW  FC
04C4:  ANDWF  77,F
04C5:  MOVF   77,W
04C6:  BSF    03.5
04C7:  IORWF  42,F
.................... n |= input(LCD_DATA7) << 3; 
*
048C:  BSF    08.7
048D:  MOVLW  00
048E:  BCF    03.5
048F:  BTFSC  08.7
0490:  MOVLW  01
0491:  MOVWF  77
0492:  RLF    77,F
0493:  RLF    77,F
0494:  RLF    77,F
0495:  MOVLW  F8
0496:  ANDWF  77,F
0497:  MOVF   77,W
0498:  BSF    03.5
0499:  IORWF  42,F
*
04C8:  BSF    08.7
04C9:  MOVLW  00
04CA:  BCF    03.5
04CB:  BTFSC  08.7
04CC:  MOVLW  01
04CD:  MOVWF  77
04CE:  RLF    77,F
04CF:  RLF    77,F
04D0:  RLF    77,F
04D1:  MOVLW  F8
04D2:  ANDWF  77,F
04D3:  MOVF   77,W
04D4:  BSF    03.5
04D5:  IORWF  42,F
....................  
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx). 
*
049A:  MOVF   42,W
049B:  MOVWF  78
*
04D6:  MOVF   42,W
04D7:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... {                                 // address = 0: Lenh / 1: Du lieu. 
....................                                  // byte = Thong tin can gui (8 bit). 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.   
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh. 
*
045B:  BCF    09.0
045C:  BSF    03.5
045D:  BCF    09.0
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
*
04E9:  MOVF   78,W
04EA:  MOVWF  40
04EB:  BTFSC  40.7
04EC:  GOTO   45E
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu. 
04ED:  MOVF   3E,F
04EE:  BTFSS  03.2
04EF:  GOTO   4F4
04F0:  BCF    03.5
04F1:  BCF    09.0
04F2:  GOTO   4F6
04F3:  BSF    03.5
04F4:  BCF    03.5
04F5:  BSF    09.0
04F6:  BSF    03.5
04F7:  BCF    09.0
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
04F8:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD. 
04F9:  BCF    03.5
04FA:  BCF    09.1
04FB:  BSF    03.5
04FC:  BCF    09.1
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
04FD:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD. 
04FE:  BCF    03.5
04FF:  BCF    09.2
0500:  BSF    03.5
0501:  BCF    09.2
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD. 
0502:  SWAPF  3F,W
0503:  MOVWF  40
0504:  MOVLW  0F
0505:  ANDWF  40,F
0506:  MOVF   40,W
0507:  MOVWF  41
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD. 
*
053F:  MOVF   3F,W
0540:  ANDLW  0F
0541:  MOVWF  40
0542:  MOVF   40,W
0543:  MOVWF  41
*
057B:  BCF    03.5
057C:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap. 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu. 
*
0508:  BTFSC  41.0
0509:  GOTO   50E
050A:  BCF    03.5
050B:  BCF    08.4
050C:  GOTO   510
050D:  BSF    03.5
050E:  BCF    03.5
050F:  BSF    08.4
0510:  BSF    03.5
0511:  BCF    08.4
*
0544:  BTFSC  41.0
0545:  GOTO   54A
0546:  BCF    03.5
0547:  BCF    08.4
0548:  GOTO   54C
0549:  BSF    03.5
054A:  BCF    03.5
054B:  BSF    08.4
054C:  BSF    03.5
054D:  BCF    08.4
*
05AE:  BTFSC  41.0
05AF:  GOTO   5B4
05B0:  BCF    03.5
05B1:  BCF    08.4
05B2:  GOTO   5B6
05B3:  BSF    03.5
05B4:  BCF    03.5
05B5:  BSF    08.4
05B6:  BSF    03.5
05B7:  BCF    08.4
*
05FE:  BTFSC  41.0
05FF:  GOTO   604
0600:  BCF    03.5
0601:  BCF    08.4
0602:  GOTO   606
0603:  BSF    03.5
0604:  BCF    03.5
0605:  BSF    08.4
0606:  BSF    03.5
0607:  BCF    08.4
.................... output_bit(LCD_DATA5, bit_test(n, 1)); 
*
0512:  BTFSC  41.1
0513:  GOTO   518
0514:  BCF    03.5
0515:  BCF    08.5
0516:  GOTO   51A
0517:  BSF    03.5
0518:  BCF    03.5
0519:  BSF    08.5
051A:  BSF    03.5
051B:  BCF    08.5
*
054E:  BTFSC  41.1
054F:  GOTO   554
0550:  BCF    03.5
0551:  BCF    08.5
0552:  GOTO   556
0553:  BSF    03.5
0554:  BCF    03.5
0555:  BSF    08.5
0556:  BSF    03.5
0557:  BCF    08.5
*
05B8:  BTFSC  41.1
05B9:  GOTO   5BE
05BA:  BCF    03.5
05BB:  BCF    08.5
05BC:  GOTO   5C0
05BD:  BSF    03.5
05BE:  BCF    03.5
05BF:  BSF    08.5
05C0:  BSF    03.5
05C1:  BCF    08.5
*
0608:  BTFSC  41.1
0609:  GOTO   60E
060A:  BCF    03.5
060B:  BCF    08.5
060C:  GOTO   610
060D:  BSF    03.5
060E:  BCF    03.5
060F:  BSF    08.5
0610:  BSF    03.5
0611:  BCF    08.5
.................... output_bit(LCD_DATA6, bit_test(n, 2)); 
*
051C:  BTFSC  41.2
051D:  GOTO   522
051E:  BCF    03.5
051F:  BCF    08.6
0520:  GOTO   524
0521:  BSF    03.5
0522:  BCF    03.5
0523:  BSF    08.6
0524:  BSF    03.5
0525:  BCF    08.6
*
0558:  BTFSC  41.2
0559:  GOTO   55E
055A:  BCF    03.5
055B:  BCF    08.6
055C:  GOTO   560
055D:  BSF    03.5
055E:  BCF    03.5
055F:  BSF    08.6
0560:  BSF    03.5
0561:  BCF    08.6
*
05C2:  BTFSC  41.2
05C3:  GOTO   5C8
05C4:  BCF    03.5
05C5:  BCF    08.6
05C6:  GOTO   5CA
05C7:  BSF    03.5
05C8:  BCF    03.5
05C9:  BSF    08.6
05CA:  BSF    03.5
05CB:  BCF    08.6
*
0612:  BTFSC  41.2
0613:  GOTO   618
0614:  BCF    03.5
0615:  BCF    08.6
0616:  GOTO   61A
0617:  BSF    03.5
0618:  BCF    03.5
0619:  BSF    08.6
061A:  BSF    03.5
061B:  BCF    08.6
.................... output_bit(LCD_DATA7, bit_test(n, 3)); 
*
0526:  BTFSC  41.3
0527:  GOTO   52C
0528:  BCF    03.5
0529:  BCF    08.7
052A:  GOTO   52E
052B:  BSF    03.5
052C:  BCF    03.5
052D:  BSF    08.7
052E:  BSF    03.5
052F:  BCF    08.7
*
0562:  BTFSC  41.3
0563:  GOTO   568
0564:  BCF    03.5
0565:  BCF    08.7
0566:  GOTO   56A
0567:  BSF    03.5
0568:  BCF    03.5
0569:  BSF    08.7
056A:  BSF    03.5
056B:  BCF    08.7
*
05CC:  BTFSC  41.3
05CD:  GOTO   5D2
05CE:  BCF    03.5
05CF:  BCF    08.7
05D0:  GOTO   5D4
05D1:  BSF    03.5
05D2:  BCF    03.5
05D3:  BSF    08.7
05D4:  BSF    03.5
05D5:  BCF    08.7
*
061C:  BTFSC  41.3
061D:  GOTO   622
061E:  BCF    03.5
061F:  BCF    08.7
0620:  GOTO   624
0621:  BSF    03.5
0622:  BCF    03.5
0623:  BSF    08.7
0624:  BSF    03.5
0625:  BCF    08.7
....................      
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
*
0530:  NOP
*
056C:  NOP
*
05D6:  NOP
*
0626:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD. 
*
0531:  BCF    03.5
0532:  BSF    09.2
0533:  BSF    03.5
0534:  BCF    09.2
*
056D:  BCF    03.5
056E:  BSF    09.2
056F:  BSF    03.5
0570:  BCF    09.2
*
05D7:  BCF    03.5
05D8:  BSF    09.2
05D9:  BSF    03.5
05DA:  BCF    09.2
*
0627:  BCF    03.5
0628:  BSF    09.2
0629:  BSF    03.5
062A:  BCF    09.2
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz). 
*
0535:  MOVLW  02
0536:  MOVWF  77
0537:  DECFSZ 77,F
0538:  GOTO   537
0539:  GOTO   53A
053A:  NOP
*
0571:  MOVLW  02
0572:  MOVWF  77
0573:  DECFSZ 77,F
0574:  GOTO   573
0575:  GOTO   576
0576:  NOP
*
05DB:  MOVLW  02
05DC:  MOVWF  77
05DD:  DECFSZ 77,F
05DE:  GOTO   5DD
05DF:  GOTO   5E0
05E0:  NOP
*
062B:  MOVLW  02
062C:  MOVWF  77
062D:  DECFSZ 77,F
062E:  GOTO   62D
062F:  GOTO   630
0630:  NOP
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low). 
*
053B:  BCF    03.5
053C:  BCF    09.2
053D:  BSF    03.5
053E:  BCF    09.2
*
0577:  BCF    03.5
0578:  BCF    09.2
0579:  BSF    03.5
057A:  BCF    09.2
*
05E1:  BCF    03.5
05E2:  BCF    09.2
05E3:  BSF    03.5
05E4:  BCF    09.2
*
0631:  BCF    03.5
0632:  BCF    09.2
0633:  BSF    03.5
0634:  BCF    09.2
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1). 
.................... { 
.................... // Khai bao bien. 
.................... byte address; 
.................... // Dinh nghia ham.   
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2. 
*
0669:  BSF    03.5
066A:  DECFSZ 3B,W
066B:  GOTO   66E
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2.  
066C:  CLRF   3C
066D:  GOTO   682
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1. 
066E:  MOVF   3B,W
066F:  SUBLW  02
0670:  BTFSS  03.2
0671:  GOTO   675
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1. 
0672:  MOVLW  40
0673:  MOVWF  3C
0674:  GOTO   682
.................... else if(y==3) 
0675:  MOVF   3B,W
0676:  SUBLW  03
0677:  BTFSS  03.2
0678:  GOTO   67C
....................    address=lcd_line_three;      
0679:  MOVLW  14
067A:  MOVWF  3C
067B:  GOTO   682
.................... else if(y==4) 
067C:  MOVF   3B,W
067D:  SUBLW  04
067E:  BTFSS  03.2
067F:  GOTO   682
....................    address=lcd_line_four;    
0680:  MOVLW  54
0681:  MOVWF  3C
....................  
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).       
0682:  MOVLW  01
0683:  SUBWF  3A,W
0684:  ADDWF  3C,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1 
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0. 
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0685:  MOVF   3C,W
0686:  IORLW  80
0687:  MOVWF  3D
0688:  CLRF   3E
0689:  MOVF   3D,W
068A:  MOVWF  3F
068B:  BCF    03.5
068C:  CALL   45B
068D:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).    
....................  
.................... // *************************************************** 
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... char value; 
.................... // Dinh nghia ham.   
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat. 
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu. 
.................... value = lcd_read_byte();   // Doc ve tu C.LCD. 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
....................  
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau. 
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... switch (c) 
068E:  BSF    03.5
068F:  MOVF   39,W
0690:  XORLW  0C
0691:  BCF    03.5
0692:  BTFSC  03.2
0693:  GOTO   69B
0694:  XORLW  06
0695:  BTFSC  03.2
0696:  GOTO   6B8
0697:  XORLW  02
0698:  BTFSC  03.2
0699:  GOTO   6C1
069A:  GOTO   6CA
....................    { 
....................    case '\f':     // Chuc nang xoa hien thi. 
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
069B:  BSF    03.5
069C:  CLRF   3E
069D:  MOVLW  01
069E:  MOVWF  3F
069F:  BCF    03.5
06A0:  CALL   45B
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01). 
06A1:  MOVLW  02
06A2:  BSF    03.5
06A3:  MOVWF  3A
....................       break; 
*
06B7:  GOTO   6D2
....................    case '\n':       // Chuc nang bat dau hang thu 2. 
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.    
06B8:  MOVLW  01
06B9:  BSF    03.5
06BA:  MOVWF  3A
06BB:  MOVLW  02
06BC:  MOVWF  3B
06BD:  BCF    03.5
06BE:  CALL   669
....................       break; 
06BF:  BSF    03.5
06C0:  GOTO   6D2
....................     case '\b':       // Chuc nang lui ve 1 vi tri. 
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD.  
06C1:  BSF    03.5
06C2:  CLRF   3E
06C3:  MOVLW  10
06C4:  MOVWF  3F
06C5:  BCF    03.5
06C6:  CALL   45B
....................       break;               // Lenh: Doi con tro sang trai (0x10). 
06C7:  BSF    03.5
06C8:  GOTO   6D2
06C9:  BCF    03.5
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD. 
06CA:  MOVLW  01
06CB:  BSF    03.5
06CC:  MOVWF  3E
06CD:  MOVF   39,W
06CE:  MOVWF  3F
06CF:  BCF    03.5
06D0:  CALL   45B
....................       break; 
06D1:  BSF    03.5
....................    } 
06D2:  BCF    03.5
06D3:  RETURN
.................... }       
.................... // ***************************************************    
....................  
....................  
.................... /********************************* Define *************************************/ 
.................... #fuses NOWDT, NOPROTECT, HS, NOLVP 
.................... #use delay(clock=20M) 
*
07C9:  MOVLW  A6
07CA:  MOVWF  04
07CB:  BCF    03.7
07CC:  MOVF   00,W
07CD:  BTFSC  03.2
07CE:  GOTO   7DC
07CF:  MOVLW  06
07D0:  MOVWF  78
07D1:  CLRF   77
07D2:  DECFSZ 77,F
07D3:  GOTO   7D2
07D4:  DECFSZ 78,F
07D5:  GOTO   7D1
07D6:  MOVLW  7B
07D7:  MOVWF  77
07D8:  DECFSZ 77,F
07D9:  GOTO   7D8
07DA:  DECFSZ 00,F
07DB:  GOTO   7CF
07DC:  BSF    0A.3
07DD:  BCF    0A.4
07DE:  GOTO   635 (RETURN)
*
1A83:  MOVLW  03
1A84:  SUBWF  4E,F
1A85:  BTFSS  03.0
1A86:  GOTO   291
1A87:  MOVLW  CE
1A88:  MOVWF  04
1A89:  BCF    03.7
1A8A:  MOVF   00,W
1A8B:  BTFSC  03.2
1A8C:  GOTO   291
1A8D:  GOTO   28F
1A8E:  GOTO   28F
1A8F:  DECFSZ 00,F
1A90:  GOTO   28E
*
1A9B:  MOVLW  03
1A9C:  SUBWF  4E,F
1A9D:  BTFSS  03.0
1A9E:  GOTO   2A9
1A9F:  MOVLW  CE
1AA0:  MOVWF  04
1AA1:  BCF    03.7
1AA2:  MOVF   00,W
1AA3:  BTFSC  03.2
1AA4:  GOTO   2A9
1AA5:  GOTO   2A7
1AA6:  GOTO   2A7
1AA7:  DECFSZ 00,F
1AA8:  GOTO   2A6
*
1AB8:  MOVLW  03
1AB9:  SUBWF  4E,F
1ABA:  BTFSS  03.0
1ABB:  GOTO   2C6
1ABC:  MOVLW  CE
1ABD:  MOVWF  04
1ABE:  BCF    03.7
1ABF:  MOVF   00,W
1AC0:  BTFSC  03.2
1AC1:  GOTO   2C6
1AC2:  GOTO   2C4
1AC3:  GOTO   2C4
1AC4:  DECFSZ 00,F
1AC5:  GOTO   2C3
*
1AD0:  MOVLW  03
1AD1:  SUBWF  4E,F
1AD2:  BTFSS  03.0
1AD3:  GOTO   2DE
1AD4:  MOVLW  CE
1AD5:  MOVWF  04
1AD6:  BCF    03.7
1AD7:  MOVF   00,W
1AD8:  BTFSC  03.2
1AD9:  GOTO   2DE
1ADA:  GOTO   2DC
1ADB:  GOTO   2DC
1ADC:  DECFSZ 00,F
1ADD:  GOTO   2DB
.................... #define NUT_1 PIN_B4 
.................... #define NUT_2 PIN_B5 
.................... #define NUT_3 PIN_B6 
.................... #define IC_DATA PIN_D0 
.................... #define IC_CLK PIN_D1 
.................... #define IC_LATCH PIN_D2 
.................... #define Out_dir PIN_C5 
.................... #define In_dir PIN_B1 
.................... #define dt (float) 0.01 
....................  
.................... #define NONSET 0 
.................... #define SET_HUNDREDS 1 
.................... #define SET_DOZENS 2 
.................... #define SET_UNITS 3 
.................... #define RUN 4 
.................... #define STOP 5 
.................... /****************************** Global Variable *******************************/ 
.................... unsigned int16 flag=0; 
.................... float x1=0; 
.................... float x2=0; 
.................... float x3=0; 
.................... float vi_tri; 
.................... int temp,temp1,temp2; 
.................... float errorC, errorP,P,I,D,PID,I0; 
.................... float KP = 10; 
.................... float KI = 0; 
.................... float KD = 3; 
.................... float SP,CP; 
.................... long pulse, f; 
.................... long count; 
.................... float xSP;                            //Global position for setpoint 
.................... float xCP;                            //Global current position 
.................... int setPosion = 5;                        //Set position 
....................  
.................... /*************************** Function Declaration *****************************/ 
.................... //Internal Function 
.................... float round(float A); 
.................... void CLK(void); 
.................... void LATCH(void); 
.................... void Export_LED(unsigned int16 P); 
.................... void LED(float D); 
.................... void set_dir(int1 dir); 
.................... void set_duty(int8 duty); 
.................... float cal_position(float x, long f); 
.................... float ReadButton(); 
.................... float PIDOutput(float SP, float CP); 
.................... void display_position (float position); 
.................... void display_current_setting (int setPosition); 
.................... void set_speed (float speed); 
.................... float integrate_speed (float position, long pulse); 
.................... void display_current_point (float position); 
.................... void display_speed (long pulse); 
....................  
.................... //Init function 
.................... void timer1_init (void); 
.................... void timer0_init(void); 
....................  
.................... //Interrupt function 
.................... void EXT_isr(void); 
.................... void TIMER0_isr(void); 
.................... void TIMER1_isr(void); 
....................  
.................... /****************************** Main Function *********************************/ 
.................... void main() 
*
0DBF:  MOVF   03,W
0DC0:  ANDLW  1F
0DC1:  MOVWF  03
0DC2:  CLRF   2D
0DC3:  CLRF   2C
0DC4:  CLRF   31
0DC5:  CLRF   30
0DC6:  CLRF   2F
0DC7:  CLRF   2E
0DC8:  CLRF   35
0DC9:  CLRF   34
0DCA:  CLRF   33
0DCB:  CLRF   32
0DCC:  CLRF   39
0DCD:  CLRF   38
0DCE:  CLRF   37
0DCF:  CLRF   36
0DD0:  CLRF   60
0DD1:  CLRF   5F
0DD2:  MOVLW  20
0DD3:  MOVWF  5E
0DD4:  MOVLW  82
0DD5:  MOVWF  5D
0DD6:  CLRF   64
0DD7:  CLRF   63
0DD8:  CLRF   62
0DD9:  CLRF   61
0DDA:  CLRF   68
0DDB:  CLRF   67
0DDC:  MOVLW  40
0DDD:  MOVWF  66
0DDE:  MOVLW  80
0DDF:  MOVWF  65
0DE0:  MOVLW  05
0DE1:  BSF    03.5
0DE2:  MOVWF  24
0DE3:  MOVLW  FF
0DE4:  MOVWF  25
0DE5:  BSF    1F.0
0DE6:  BSF    1F.1
0DE7:  BSF    1F.2
0DE8:  BCF    1F.3
0DE9:  MOVLW  07
0DEA:  MOVWF  1C
0DEB:  BCF    03.7
.................... { 
....................    //Initialize function 
....................    lcd_init(); 
0DEC:  BCF    0A.3
0DED:  BCF    03.5
0DEE:  GOTO   57D
0DEF:  BSF    0A.3
....................    timer0_init(); 
0DF0:  BCF    0A.3
0DF1:  GOTO   64B
0DF2:  BSF    0A.3
....................    timer1_init(); 
0DF3:  BCF    0A.3
0DF4:  GOTO   65A
0DF5:  BSF    0A.3
....................    while(TRUE) { 
....................    //TODO: User Code 
....................       xSP = ReadButton(); 
0DF6:  BSF    0A.4
0DF7:  BCF    0A.3
0DF8:  GOTO   000
0DF9:  BCF    0A.4
0DFA:  BSF    0A.3
0DFB:  MOVF   7A,W
0DFC:  MOVWF  7E
0DFD:  MOVF   79,W
0DFE:  MOVWF  7D
0DFF:  MOVF   78,W
0E00:  MOVWF  7C
0E01:  MOVF   77,W
0E02:  MOVWF  7B
....................       display_position(xSP); 
0E03:  MOVF   7E,W
0E04:  BSF    03.5
0E05:  MOVWF  29
0E06:  MOVF   7D,W
0E07:  MOVWF  28
0E08:  MOVF   7C,W
0E09:  MOVWF  27
0E0A:  MOVF   7B,W
0E0B:  MOVWF  26
0E0C:  BCF    0A.3
0E0D:  BCF    03.5
0E0E:  GOTO   748
0E0F:  BSF    0A.3
....................       display_current_setting(setPosion); 
0E10:  BSF    03.5
0E11:  MOVF   24,W
0E12:  MOVWF  26
0E13:  BCF    0A.3
0E14:  BCF    03.5
0E15:  GOTO   775
0E16:  BSF    0A.3
....................       display_current_point(xCP); 
0E17:  BSF    03.5
0E18:  MOVF   23,W
0E19:  MOVWF  29
0E1A:  MOVF   22,W
0E1B:  MOVWF  28
0E1C:  MOVF   21,W
0E1D:  MOVWF  27
0E1E:  MOVF   20,W
0E1F:  MOVWF  26
0E20:  BSF    0A.4
0E21:  BCF    03.5
0E22:  GOTO   000
0E23:  BCF    0A.4
....................       display_speed(f); 
0E24:  MOVF   74,W
0E25:  BSF    03.5
0E26:  MOVWF  27
0E27:  MOVF   73,W
0E28:  MOVWF  26
0E29:  BSF    0A.4
0E2A:  BCF    0A.3
0E2B:  BCF    03.5
0E2C:  GOTO   4B1
0E2D:  BCF    0A.4
0E2E:  BSF    0A.3
....................       delay_ms(50); 
0E2F:  MOVLW  32
0E30:  BSF    03.5
0E31:  MOVWF  26
0E32:  BCF    0A.3
0E33:  BCF    03.5
0E34:  GOTO   7C9
0E35:  BSF    0A.3
0E36:  GOTO   5F6
....................    } 
.................... } 
....................  
0E37:  SLEEP
.................... /*************************** Function Definition ******************************/ 
.................... float round(float A) 
.................... { 
....................    A = A*10; 
*
18A1:  BSF    03.5
18A2:  MOVF   4F,W
18A3:  BCF    03.5
18A4:  BSF    03.6
18A5:  MOVWF  1D
18A6:  BSF    03.5
18A7:  BCF    03.6
18A8:  MOVF   4E,W
18A9:  BCF    03.5
18AA:  BSF    03.6
18AB:  MOVWF  1C
18AC:  BSF    03.5
18AD:  BCF    03.6
18AE:  MOVF   4D,W
18AF:  BCF    03.5
18B0:  BSF    03.6
18B1:  MOVWF  1B
18B2:  BSF    03.5
18B3:  BCF    03.6
18B4:  MOVF   4C,W
18B5:  BCF    03.5
18B6:  BSF    03.6
18B7:  MOVWF  1A
18B8:  CLRF   21
18B9:  CLRF   20
18BA:  MOVLW  20
18BB:  MOVWF  1F
18BC:  MOVLW  82
18BD:  MOVWF  1E
18BE:  BCF    0A.4
18BF:  BCF    0A.3
18C0:  BCF    03.6
18C1:  CALL   0A6
18C2:  BSF    0A.4
18C3:  BSF    0A.3
18C4:  BTFSC  2B.7
18C5:  BSF    0B.7
18C6:  MOVF   7A,W
18C7:  BSF    03.5
18C8:  MOVWF  4F
18C9:  MOVF   79,W
18CA:  MOVWF  4E
18CB:  MOVF   78,W
18CC:  MOVWF  4D
18CD:  MOVF   77,W
18CE:  MOVWF  4C
18CF:  BCF    03.5
18D0:  CLRF   2B
18D1:  BTFSC  0B.7
18D2:  BSF    2B.7
18D3:  BCF    0B.7
....................    if(A>=0){ 
18D4:  BSF    03.5
18D5:  CLRF   6D
18D6:  CLRF   6C
18D7:  CLRF   6B
18D8:  CLRF   6A
18D9:  MOVF   4F,W
18DA:  BCF    03.5
18DB:  BSF    03.6
18DC:  MOVWF  13
18DD:  BSF    03.5
18DE:  BCF    03.6
18DF:  MOVF   4E,W
18E0:  BCF    03.5
18E1:  BSF    03.6
18E2:  MOVWF  12
18E3:  BSF    03.5
18E4:  BCF    03.6
18E5:  MOVF   4D,W
18E6:  BCF    03.5
18E7:  BSF    03.6
18E8:  MOVWF  11
18E9:  BSF    03.5
18EA:  BCF    03.6
18EB:  MOVF   4C,W
18EC:  BCF    03.5
18ED:  BSF    03.6
18EE:  MOVWF  10
18EF:  BCF    0A.4
18F0:  BCF    0A.3
18F1:  BCF    03.6
18F2:  CALL   32F
18F3:  BSF    0A.4
18F4:  BSF    0A.3
18F5:  BTFSC  2B.7
18F6:  BSF    0B.7
18F7:  BTFSC  03.0
18F8:  GOTO   0FB
18F9:  BTFSS  03.2
18FA:  GOTO   174
....................       if((int)A%10 >= 5) { 
18FB:  BSF    03.5
18FC:  MOVF   4F,W
18FD:  MOVWF  6B
18FE:  MOVF   4E,W
18FF:  MOVWF  6A
1900:  MOVF   4D,W
1901:  MOVWF  69
1902:  MOVF   4C,W
1903:  MOVWF  68
*
1922:  MOVF   78,W
1923:  MOVWF  51
1924:  MOVLW  0A
1925:  MOVWF  52
*
193A:  MOVF   77,W
193B:  SUBLW  04
193C:  BTFSC  03.0
193D:  GOTO   172
....................          A+=10; 
193E:  BCF    03.1
193F:  BCF    03.5
1940:  CLRF   2B
1941:  BTFSC  0B.7
1942:  BSF    2B.7
1943:  BCF    0B.7
1944:  BSF    03.5
1945:  MOVF   4F,W
1946:  BCF    03.5
1947:  BSF    03.6
1948:  MOVWF  19
1949:  BSF    03.5
194A:  BCF    03.6
194B:  MOVF   4E,W
194C:  BCF    03.5
194D:  BSF    03.6
194E:  MOVWF  18
194F:  BSF    03.5
1950:  BCF    03.6
1951:  MOVF   4D,W
1952:  BCF    03.5
1953:  BSF    03.6
1954:  MOVWF  17
1955:  BSF    03.5
1956:  BCF    03.6
1957:  MOVF   4C,W
1958:  BCF    03.5
1959:  BSF    03.6
195A:  MOVWF  16
195B:  CLRF   1D
195C:  CLRF   1C
195D:  MOVLW  20
195E:  MOVWF  1B
195F:  MOVLW  82
1960:  MOVWF  1A
1961:  BCF    0A.4
1962:  BCF    0A.3
1963:  BCF    03.6
1964:  CALL   1E9
1965:  BSF    0A.4
1966:  BSF    0A.3
1967:  BTFSC  2B.7
1968:  BSF    0B.7
1969:  MOVF   7A,W
196A:  BSF    03.5
196B:  MOVWF  4F
196C:  MOVF   79,W
196D:  MOVWF  4E
196E:  MOVF   78,W
196F:  MOVWF  4D
1970:  MOVF   77,W
1971:  MOVWF  4C
....................       } 
....................    } else { 
1972:  GOTO   1F4
1973:  BCF    03.5
....................       if((int)-A%10 >= 5) { 
1974:  BSF    03.5
1975:  MOVF   4C,W
1976:  MOVWF  77
1977:  MOVF   4D,W
1978:  XORLW  80
1979:  MOVWF  78
197A:  MOVF   4E,W
197B:  MOVWF  79
197C:  MOVF   4F,W
197D:  MOVWF  7A
197E:  MOVF   7A,W
197F:  MOVWF  6B
1980:  MOVF   79,W
1981:  MOVWF  6A
1982:  MOVF   78,W
1983:  MOVWF  69
1984:  MOVF   77,W
1985:  MOVWF  68
*
19A4:  MOVF   78,W
19A5:  MOVWF  51
19A6:  MOVLW  0A
19A7:  MOVWF  52
*
19BC:  MOVF   77,W
19BD:  SUBLW  04
19BE:  BTFSC  03.0
19BF:  GOTO   1F4
....................          A-=10; 
19C0:  BSF    03.1
19C1:  BCF    03.5
19C2:  CLRF   2B
19C3:  BTFSC  0B.7
19C4:  BSF    2B.7
19C5:  BCF    0B.7
19C6:  BSF    03.5
19C7:  MOVF   4F,W
19C8:  BCF    03.5
19C9:  BSF    03.6
19CA:  MOVWF  19
19CB:  BSF    03.5
19CC:  BCF    03.6
19CD:  MOVF   4E,W
19CE:  BCF    03.5
19CF:  BSF    03.6
19D0:  MOVWF  18
19D1:  BSF    03.5
19D2:  BCF    03.6
19D3:  MOVF   4D,W
19D4:  BCF    03.5
19D5:  BSF    03.6
19D6:  MOVWF  17
19D7:  BSF    03.5
19D8:  BCF    03.6
19D9:  MOVF   4C,W
19DA:  BCF    03.5
19DB:  BSF    03.6
19DC:  MOVWF  16
19DD:  CLRF   1D
19DE:  CLRF   1C
19DF:  MOVLW  20
19E0:  MOVWF  1B
19E1:  MOVLW  82
19E2:  MOVWF  1A
19E3:  BCF    0A.4
19E4:  BCF    0A.3
19E5:  BCF    03.6
19E6:  CALL   1E9
19E7:  BSF    0A.4
19E8:  BSF    0A.3
19E9:  BTFSC  2B.7
19EA:  BSF    0B.7
19EB:  MOVF   7A,W
19EC:  BSF    03.5
19ED:  MOVWF  4F
19EE:  MOVF   79,W
19EF:  MOVWF  4E
19F0:  MOVF   78,W
19F1:  MOVWF  4D
19F2:  MOVF   77,W
19F3:  MOVWF  4C
19F4:  BCF    03.5
19F5:  CLRF   2B
19F6:  BTFSC  0B.7
19F7:  BSF    2B.7
19F8:  BCF    0B.7
....................       } 
....................    } 
....................    A = A/10; 
19F9:  BSF    03.5
19FA:  MOVF   4F,W
19FB:  BCF    03.5
19FC:  BSF    03.6
19FD:  MOVWF  1D
19FE:  BSF    03.5
19FF:  BCF    03.6
1A00:  MOVF   4E,W
1A01:  BCF    03.5
1A02:  BSF    03.6
1A03:  MOVWF  1C
1A04:  BSF    03.5
1A05:  BCF    03.6
1A06:  MOVF   4D,W
1A07:  BCF    03.5
1A08:  BSF    03.6
1A09:  MOVWF  1B
1A0A:  BSF    03.5
1A0B:  BCF    03.6
1A0C:  MOVF   4C,W
1A0D:  BCF    03.5
1A0E:  BSF    03.6
1A0F:  MOVWF  1A
1A10:  CLRF   21
1A11:  CLRF   20
1A12:  MOVLW  20
1A13:  MOVWF  1F
1A14:  MOVLW  82
1A15:  MOVWF  1E
1A16:  BCF    0A.4
1A17:  BCF    0A.3
1A18:  BCF    03.6
1A19:  CALL   11D
1A1A:  BSF    0A.4
1A1B:  BSF    0A.3
1A1C:  BTFSC  2B.7
1A1D:  BSF    0B.7
1A1E:  MOVF   7A,W
1A1F:  BSF    03.5
1A20:  MOVWF  4F
1A21:  MOVF   79,W
1A22:  MOVWF  4E
1A23:  MOVF   78,W
1A24:  MOVWF  4D
1A25:  MOVF   77,W
1A26:  MOVWF  4C
....................    return A; 
1A27:  MOVF   4C,W
1A28:  MOVWF  77
1A29:  MOVF   4D,W
1A2A:  MOVWF  78
1A2B:  MOVF   4E,W
1A2C:  MOVWF  79
1A2D:  MOVF   4F,W
1A2E:  MOVWF  7A
.................... } 
....................  
.................... void CLK(void) // shift clock 
.................... { 
....................    output_low(IC_CLK); 
*
1A7B:  BCF    08.1
1A7C:  BCF    03.5
1A7D:  BCF    08.1
....................    delay_us(500); 
1A7E:  MOVLW  02
1A7F:  BSF    03.5
1A80:  MOVWF  4D
1A81:  MOVLW  F9
1A82:  MOVWF  4E
*
1A91:  DECFSZ 4D,F
1A92:  GOTO   281
....................    output_high(IC_CLK); 
1A93:  BCF    08.1
1A94:  BCF    03.5
1A95:  BSF    08.1
....................    delay_us(500); 
1A96:  MOVLW  02
1A97:  BSF    03.5
1A98:  MOVWF  4D
1A99:  MOVLW  F9
1A9A:  MOVWF  4E
*
1AA9:  DECFSZ 4D,F
1AAA:  GOTO   299
.................... } 
....................  
.................... void LATCH(void) // latch clock 
.................... { 
....................    output_high(IC_LATCH); 
*
1AB0:  BCF    08.2
1AB1:  BCF    03.5
1AB2:  BSF    08.2
....................    delay_us(500); 
1AB3:  MOVLW  02
1AB4:  BSF    03.5
1AB5:  MOVWF  4D
1AB6:  MOVLW  F9
1AB7:  MOVWF  4E
*
1AC6:  DECFSZ 4D,F
1AC7:  GOTO   2B6
....................    output_low(IC_LATCH); 
1AC8:  BCF    08.2
1AC9:  BCF    03.5
1ACA:  BCF    08.2
....................    delay_us(500); 
1ACB:  MOVLW  02
1ACC:  BSF    03.5
1ACD:  MOVWF  4D
1ACE:  MOVLW  F9
1ACF:  MOVWF  4E
*
1ADE:  DECFSZ 4D,F
1ADF:  GOTO   2CE
.................... } 
....................  
.................... void Export_LED(unsigned int16 P) // export led 
.................... { 
....................    #bit DB = P.15 
....................    for(unsigned int i=0; i<16; i++) 
*
1A6C:  CLRF   4C
1A6D:  MOVF   4C,W
1A6E:  SUBLW  0F
1A6F:  BTFSS  03.0
1A70:  GOTO   2B0
....................    { 
....................       output_bit(IC_DATA, DB); 
1A71:  BTFSC  4B.7
1A72:  GOTO   277
1A73:  BCF    03.5
1A74:  BCF    08.0
1A75:  GOTO   279
1A76:  BSF    03.5
1A77:  BCF    03.5
1A78:  BSF    08.0
1A79:  BSF    03.5
1A7A:  BCF    08.0
....................       CLK(); 
....................       P=P<<1; 
*
1AAB:  BCF    03.0
1AAC:  RLF    4A,F
1AAD:  RLF    4B,F
1AAE:  INCF   4C,F
1AAF:  GOTO   26D
....................    } 
....................    LATCH(); 
.................... } 
....................  
.................... void LED(float D) // Led 
.................... { 
....................    unsigned int16 array[11] = { 0x07E0, 0x03E0, 0x01E0, 0x00E0, 0x0060, 0x0020, 
....................                                 0x0030, 0x0038, 0x003C, 0x003E, 0x003F}; 
*
1809:  MOVLW  E0
180A:  MOVWF  2E
180B:  MOVLW  07
180C:  MOVWF  2F
180D:  MOVLW  E0
180E:  MOVWF  30
180F:  MOVLW  03
1810:  MOVWF  31
1811:  MOVLW  E0
1812:  MOVWF  32
1813:  MOVLW  01
1814:  MOVWF  33
1815:  MOVLW  E0
1816:  MOVWF  34
1817:  CLRF   35
1818:  MOVLW  60
1819:  MOVWF  36
181A:  CLRF   37
181B:  MOVLW  20
181C:  MOVWF  38
181D:  CLRF   39
181E:  MOVLW  30
181F:  MOVWF  3A
1820:  CLRF   3B
1821:  MOVLW  38
1822:  MOVWF  3C
1823:  CLRF   3D
1824:  MOVLW  3C
1825:  MOVWF  3E
1826:  CLRF   3F
1827:  MOVLW  3E
1828:  MOVWF  40
1829:  CLRF   41
182A:  MOVLW  3F
182B:  MOVWF  42
182C:  CLRF   43
182D:  BCF    03.5
182E:  CLRF   2B
182F:  BTFSC  0B.7
1830:  BSF    2B.7
1831:  BCF    0B.7
....................    float i; 
....................    i = round(D/100 + 5); 
1832:  BSF    03.5
1833:  MOVF   2D,W
1834:  BCF    03.5
1835:  BSF    03.6
1836:  MOVWF  1D
1837:  BSF    03.5
1838:  BCF    03.6
1839:  MOVF   2C,W
183A:  BCF    03.5
183B:  BSF    03.6
183C:  MOVWF  1C
183D:  BSF    03.5
183E:  BCF    03.6
183F:  MOVF   2B,W
1840:  BCF    03.5
1841:  BSF    03.6
1842:  MOVWF  1B
1843:  BSF    03.5
1844:  BCF    03.6
1845:  MOVF   2A,W
1846:  BCF    03.5
1847:  BSF    03.6
1848:  MOVWF  1A
1849:  CLRF   21
184A:  CLRF   20
184B:  MOVLW  48
184C:  MOVWF  1F
184D:  MOVLW  85
184E:  MOVWF  1E
184F:  BCF    0A.4
1850:  BCF    0A.3
1851:  BCF    03.6
1852:  CALL   11D
1853:  BSF    0A.4
1854:  BSF    0A.3
1855:  BTFSC  2B.7
1856:  BSF    0B.7
1857:  MOVF   7A,W
1858:  BSF    03.5
1859:  MOVWF  4B
185A:  MOVF   79,W
185B:  MOVWF  4A
185C:  MOVF   78,W
185D:  MOVWF  49
185E:  MOVF   77,W
185F:  MOVWF  48
1860:  BCF    03.1
1861:  BCF    03.5
1862:  CLRF   2B
1863:  BTFSC  0B.7
1864:  BSF    2B.7
1865:  BCF    0B.7
1866:  BSF    03.5
1867:  MOVF   4B,W
1868:  BCF    03.5
1869:  BSF    03.6
186A:  MOVWF  19
186B:  BSF    03.5
186C:  BCF    03.6
186D:  MOVF   4A,W
186E:  BCF    03.5
186F:  BSF    03.6
1870:  MOVWF  18
1871:  BSF    03.5
1872:  BCF    03.6
1873:  MOVF   49,W
1874:  BCF    03.5
1875:  BSF    03.6
1876:  MOVWF  17
1877:  BSF    03.5
1878:  BCF    03.6
1879:  MOVF   48,W
187A:  BCF    03.5
187B:  BSF    03.6
187C:  MOVWF  16
187D:  CLRF   1D
187E:  CLRF   1C
187F:  MOVLW  20
1880:  MOVWF  1B
1881:  MOVLW  81
1882:  MOVWF  1A
1883:  BCF    0A.4
1884:  BCF    0A.3
1885:  BCF    03.6
1886:  CALL   1E9
1887:  BSF    0A.4
1888:  BSF    0A.3
1889:  BTFSC  2B.7
188A:  BSF    0B.7
188B:  MOVF   7A,W
188C:  BSF    03.5
188D:  MOVWF  4B
188E:  MOVF   79,W
188F:  MOVWF  4A
1890:  MOVF   78,W
1891:  MOVWF  49
1892:  MOVF   77,W
1893:  MOVWF  48
1894:  MOVF   4B,W
1895:  MOVWF  4F
1896:  MOVF   4A,W
1897:  MOVWF  4E
1898:  MOVF   49,W
1899:  MOVWF  4D
189A:  MOVF   48,W
189B:  MOVWF  4C
189C:  BCF    03.5
189D:  CLRF   2B
189E:  BTFSC  0B.7
189F:  BSF    2B.7
18A0:  BCF    0B.7
*
1A2F:  MOVF   7A,W
1A30:  MOVWF  47
1A31:  MOVF   79,W
1A32:  MOVWF  46
1A33:  MOVF   78,W
1A34:  MOVWF  45
1A35:  MOVF   77,W
1A36:  MOVWF  44
....................    Export_LED(array[(int)i]); 
1A37:  MOVF   47,W
1A38:  MOVWF  6B
1A39:  MOVF   46,W
1A3A:  MOVWF  6A
1A3B:  MOVF   45,W
1A3C:  MOVWF  69
1A3D:  MOVF   44,W
1A3E:  MOVWF  68
*
1A5D:  BCF    03.0
1A5E:  RLF    78,W
1A5F:  ADDLW  AE
1A60:  MOVWF  04
1A61:  BCF    03.7
1A62:  INCF   04,F
1A63:  MOVF   00,W
1A64:  MOVWF  49
1A65:  DECF   04,F
1A66:  MOVF   00,W
1A67:  MOVWF  48
1A68:  MOVF   49,W
1A69:  MOVWF  4B
1A6A:  MOVF   48,W
1A6B:  MOVWF  4A
.................... } 
....................  
.................... void set_speed (float speed) { 
....................    float temp; 
....................    if(speed > 0 ) { 
*
03AF:  BSF    03.5
03B0:  CLRF   6D
03B1:  CLRF   6C
03B2:  CLRF   6B
03B3:  CLRF   6A
03B4:  MOVF   63,W
03B5:  BCF    03.5
03B6:  BSF    03.6
03B7:  MOVWF  13
03B8:  BSF    03.5
03B9:  BCF    03.6
03BA:  MOVF   62,W
03BB:  BCF    03.5
03BC:  BSF    03.6
03BD:  MOVWF  12
03BE:  BSF    03.5
03BF:  BCF    03.6
03C0:  MOVF   61,W
03C1:  BCF    03.5
03C2:  BSF    03.6
03C3:  MOVWF  11
03C4:  BSF    03.5
03C5:  BCF    03.6
03C6:  MOVF   60,W
03C7:  BCF    03.5
03C8:  BSF    03.6
03C9:  MOVWF  10
03CA:  BCF    03.6
03CB:  CALL   32F
03CC:  BTFSS  03.0
03CD:  GOTO   3FF
....................       set_dir (0); 
03CE:  BSF    03.5
03CF:  CLRF   68
03D0:  BCF    03.5
03D1:  CALL   384
....................       set_duty((int8) speed); 
03D2:  BSF    03.5
03D3:  MOVF   63,W
03D4:  MOVWF  6B
03D5:  MOVF   62,W
03D6:  MOVWF  6A
03D7:  MOVF   61,W
03D8:  MOVWF  69
03D9:  MOVF   60,W
03DA:  MOVWF  68
*
03F9:  MOVF   78,W
03FA:  MOVWF  68
03FB:  MOVWF  69
03FC:  BCF    03.5
03FD:  CALL   39C
....................    } else { 
03FE:  GOTO   439
....................       temp = -speed; 
03FF:  BSF    03.5
0400:  MOVF   60,W
0401:  MOVWF  64
0402:  MOVF   61,W
0403:  XORLW  80
0404:  MOVWF  65
0405:  MOVF   62,W
0406:  MOVWF  66
0407:  MOVF   63,W
0408:  MOVWF  67
....................       set_dir(1); 
0409:  MOVLW  01
040A:  MOVWF  68
040B:  BCF    03.5
040C:  CALL   384
....................       set_duty((int8) temp); 
040D:  BSF    03.5
040E:  MOVF   67,W
040F:  MOVWF  6B
0410:  MOVF   66,W
0411:  MOVWF  6A
0412:  MOVF   65,W
0413:  MOVWF  69
0414:  MOVF   64,W
0415:  MOVWF  68
*
0434:  MOVF   78,W
0435:  MOVWF  68
0436:  MOVWF  69
0437:  BCF    03.5
0438:  CALL   39C
....................    } 
0439:  RETURN
.................... } 
.................... void set_dir(int1 dir) // dir = 0 : CW , dir = 1 : CCW 
.................... { 
....................    switch(dir) 
*
0384:  BSF    03.5
0385:  MOVF   68,W
0386:  XORLW  01
0387:  BCF    03.5
0388:  BTFSC  03.2
0389:  GOTO   38E
038A:  XORLW  01
038B:  BTFSC  03.2
038C:  GOTO   395
038D:  GOTO   39B
....................    { 
....................       case 1: 
....................       output_high(Out_dir); 
038E:  BSF    03.5
038F:  BCF    25.5
0390:  MOVF   25,W
0391:  MOVWF  07
0392:  BCF    03.5
0393:  BSF    07.5
....................       break; 
0394:  GOTO   39B
....................       case 0: 
....................       output_low(Out_dir); 
0395:  BSF    03.5
0396:  BCF    25.5
0397:  MOVF   25,W
0398:  MOVWF  07
0399:  BCF    03.5
039A:  BCF    07.5
....................       break; 
....................    } 
039B:  RETURN
.................... } 
....................  
.................... void set_duty(int8 duty) // duty ~ 8bit, 0 - 255 
.................... { 
....................    setup_timer_2(T2_DIV_BY_16, 255, 1); 
039C:  MOVLW  00
039D:  MOVWF  78
039E:  IORLW  06
039F:  MOVWF  12
03A0:  MOVLW  FF
03A1:  BSF    03.5
03A2:  MOVWF  12
....................    setup_ccp1(CCP_PWM); 
03A3:  BCF    25.2
03A4:  MOVF   25,W
03A5:  MOVWF  07
03A6:  BCF    03.5
03A7:  BCF    07.2
03A8:  MOVLW  0C
03A9:  MOVWF  17
....................    set_pwm1_duty(duty); 
03AA:  BSF    03.5
03AB:  MOVF   69,W
03AC:  BCF    03.5
03AD:  MOVWF  15
03AE:  RETURN
.................... } 
....................  
.................... float cal_position(float x, long pulse) // feedback CP 
.................... { 
....................    float temp; 
....................    if(input(In_dir) == 0) 
*
0827:  BSF    03.5
0828:  BCF    03.6
0829:  BSF    06.1
082A:  BCF    03.5
082B:  BTFSC  06.1
082C:  GOTO   08F
....................       temp = -(float) pulse*dt/4; 
082D:  BSF    03.6
082E:  MOVF   11,W
082F:  MOVWF  17
0830:  MOVF   10,W
0831:  MOVWF  16
*
084E:  MOVF   77,W
084F:  MOVWF  16
0850:  MOVF   78,W
0851:  XORLW  80
0852:  MOVWF  17
0853:  MOVF   79,W
0854:  MOVWF  18
0855:  MOVF   7A,W
0856:  MOVWF  19
0857:  MOVWF  1D
0858:  MOVF   18,W
0859:  MOVWF  1C
085A:  MOVF   17,W
085B:  MOVWF  1B
085C:  MOVF   16,W
085D:  MOVWF  1A
085E:  MOVLW  0A
085F:  MOVWF  21
0860:  MOVLW  D7
0861:  MOVWF  20
0862:  MOVLW  23
0863:  MOVWF  1F
0864:  MOVLW  78
0865:  MOVWF  1E
0866:  BCF    0A.3
0867:  BCF    03.6
0868:  CALL   0A6
0869:  BSF    0A.3
086A:  MOVF   7A,W
086B:  BSF    03.6
086C:  MOVWF  19
086D:  MOVF   79,W
086E:  MOVWF  18
086F:  MOVF   78,W
0870:  MOVWF  17
0871:  MOVF   77,W
0872:  MOVWF  16
0873:  MOVF   19,W
0874:  MOVWF  1D
0875:  MOVF   18,W
0876:  MOVWF  1C
0877:  MOVF   17,W
0878:  MOVWF  1B
0879:  MOVF   16,W
087A:  MOVWF  1A
087B:  CLRF   21
087C:  CLRF   20
087D:  CLRF   1F
087E:  MOVLW  81
087F:  MOVWF  1E
0880:  BCF    0A.3
0881:  BCF    03.6
0882:  CALL   11D
0883:  BSF    0A.3
0884:  MOVF   7A,W
0885:  BSF    03.6
0886:  MOVWF  15
0887:  MOVF   79,W
0888:  MOVWF  14
0889:  MOVF   78,W
088A:  MOVWF  13
088B:  MOVF   77,W
088C:  MOVWF  12
088D:  GOTO   0EF
088E:  BCF    03.6
....................    else 
....................       temp = (float) pulse*dt/4; 
088F:  BSF    03.6
0890:  MOVF   11,W
0891:  MOVWF  17
0892:  MOVF   10,W
0893:  MOVWF  16
*
08B0:  MOVF   7A,W
08B1:  MOVWF  19
08B2:  MOVF   79,W
08B3:  MOVWF  18
08B4:  MOVF   78,W
08B5:  MOVWF  17
08B6:  MOVF   77,W
08B7:  MOVWF  16
08B8:  MOVF   19,W
08B9:  MOVWF  1D
08BA:  MOVF   18,W
08BB:  MOVWF  1C
08BC:  MOVF   17,W
08BD:  MOVWF  1B
08BE:  MOVF   16,W
08BF:  MOVWF  1A
08C0:  MOVLW  0A
08C1:  MOVWF  21
08C2:  MOVLW  D7
08C3:  MOVWF  20
08C4:  MOVLW  23
08C5:  MOVWF  1F
08C6:  MOVLW  78
08C7:  MOVWF  1E
08C8:  BCF    0A.3
08C9:  BCF    03.6
08CA:  CALL   0A6
08CB:  BSF    0A.3
08CC:  MOVF   7A,W
08CD:  BSF    03.6
08CE:  MOVWF  19
08CF:  MOVF   79,W
08D0:  MOVWF  18
08D1:  MOVF   78,W
08D2:  MOVWF  17
08D3:  MOVF   77,W
08D4:  MOVWF  16
08D5:  MOVF   19,W
08D6:  MOVWF  1D
08D7:  MOVF   18,W
08D8:  MOVWF  1C
08D9:  MOVF   17,W
08DA:  MOVWF  1B
08DB:  MOVF   16,W
08DC:  MOVWF  1A
08DD:  CLRF   21
08DE:  CLRF   20
08DF:  CLRF   1F
08E0:  MOVLW  81
08E1:  MOVWF  1E
08E2:  BCF    0A.3
08E3:  BCF    03.6
08E4:  CALL   11D
08E5:  BSF    0A.3
08E6:  MOVF   7A,W
08E7:  BSF    03.6
08E8:  MOVWF  15
08E9:  MOVF   79,W
08EA:  MOVWF  14
08EB:  MOVF   78,W
08EC:  MOVWF  13
08ED:  MOVF   77,W
08EE:  MOVWF  12
....................    x = x + temp; 
08EF:  BCF    03.1
08F0:  BSF    03.5
08F1:  BCF    03.6
08F2:  MOVF   6F,W
08F3:  BCF    03.5
08F4:  BSF    03.6
08F5:  MOVWF  19
08F6:  BSF    03.5
08F7:  BCF    03.6
08F8:  MOVF   6E,W
08F9:  BCF    03.5
08FA:  BSF    03.6
08FB:  MOVWF  18
08FC:  BSF    03.5
08FD:  BCF    03.6
08FE:  MOVF   6D,W
08FF:  BCF    03.5
0900:  BSF    03.6
0901:  MOVWF  17
0902:  BSF    03.5
0903:  BCF    03.6
0904:  MOVF   6C,W
0905:  BCF    03.5
0906:  BSF    03.6
0907:  MOVWF  16
0908:  MOVF   15,W
0909:  MOVWF  1D
090A:  MOVF   14,W
090B:  MOVWF  1C
090C:  MOVF   13,W
090D:  MOVWF  1B
090E:  MOVF   12,W
090F:  MOVWF  1A
0910:  BCF    0A.3
0911:  BCF    03.6
0912:  CALL   1E9
0913:  BSF    0A.3
0914:  MOVF   7A,W
0915:  BSF    03.5
0916:  MOVWF  6F
0917:  MOVF   79,W
0918:  MOVWF  6E
0919:  MOVF   78,W
091A:  MOVWF  6D
091B:  MOVF   77,W
091C:  MOVWF  6C
....................    return x; 
091D:  MOVF   6C,W
091E:  MOVWF  77
091F:  MOVF   6D,W
0920:  MOVWF  78
0921:  MOVF   6E,W
0922:  MOVWF  79
0923:  MOVF   6F,W
0924:  MOVWF  7A
.................... } 
....................  
.................... float integrate_speed (float position, long pulse) { 
*
080D:  MOVF   63,W
080E:  MOVWF  69
080F:  MOVF   62,W
0810:  MOVWF  68
0811:  MOVF   61,W
0812:  MOVWF  67
0813:  MOVF   60,W
0814:  MOVWF  66
....................    float temp = position; 
....................    position = cal_position(temp, pulse); 
0815:  MOVF   69,W
0816:  MOVWF  6F
0817:  MOVF   68,W
0818:  MOVWF  6E
0819:  MOVF   67,W
081A:  MOVWF  6D
081B:  MOVF   66,W
081C:  MOVWF  6C
081D:  MOVF   65,W
081E:  BCF    03.5
081F:  BSF    03.6
0820:  MOVWF  11
0821:  BSF    03.5
0822:  BCF    03.6
0823:  MOVF   64,W
0824:  BCF    03.5
0825:  BSF    03.6
0826:  MOVWF  10
*
0925:  MOVF   7A,W
0926:  MOVWF  63
0927:  MOVF   79,W
0928:  MOVWF  62
0929:  MOVF   78,W
092A:  MOVWF  61
092B:  MOVF   77,W
092C:  MOVWF  60
....................    if(position > 500) 
092D:  CLRF   6D
092E:  CLRF   6C
092F:  MOVLW  7A
0930:  MOVWF  6B
0931:  MOVLW  87
0932:  MOVWF  6A
0933:  MOVF   63,W
0934:  BCF    03.5
0935:  BSF    03.6
0936:  MOVWF  13
0937:  BSF    03.5
0938:  BCF    03.6
0939:  MOVF   62,W
093A:  BCF    03.5
093B:  BSF    03.6
093C:  MOVWF  12
093D:  BSF    03.5
093E:  BCF    03.6
093F:  MOVF   61,W
0940:  BCF    03.5
0941:  BSF    03.6
0942:  MOVWF  11
0943:  BSF    03.5
0944:  BCF    03.6
0945:  MOVF   60,W
0946:  BCF    03.5
0947:  BSF    03.6
0948:  MOVWF  10
0949:  BCF    0A.3
094A:  BCF    03.6
094B:  CALL   32F
094C:  BSF    0A.3
094D:  BTFSS  03.0
094E:  GOTO   157
....................       position = 500; 
094F:  BSF    03.5
0950:  CLRF   63
0951:  CLRF   62
0952:  MOVLW  7A
0953:  MOVWF  61
0954:  MOVLW  87
0955:  MOVWF  60
0956:  BCF    03.5
....................    if(position < -500) 
0957:  BSF    03.5
0958:  MOVF   63,W
0959:  MOVWF  6D
095A:  MOVF   62,W
095B:  MOVWF  6C
095C:  MOVF   61,W
095D:  MOVWF  6B
095E:  MOVF   60,W
095F:  MOVWF  6A
0960:  BCF    03.5
0961:  BSF    03.6
0962:  CLRF   13
0963:  CLRF   12
0964:  MOVLW  FA
0965:  MOVWF  11
0966:  MOVLW  87
0967:  MOVWF  10
0968:  BCF    0A.3
0969:  BCF    03.6
096A:  CALL   32F
096B:  BSF    0A.3
096C:  BTFSS  03.0
096D:  GOTO   176
....................       position = -500; 
096E:  BSF    03.5
096F:  CLRF   63
0970:  CLRF   62
0971:  MOVLW  FA
0972:  MOVWF  61
0973:  MOVLW  87
0974:  MOVWF  60
0975:  BCF    03.5
....................    return position; 
0976:  BSF    03.5
0977:  MOVF   60,W
0978:  MOVWF  77
0979:  MOVF   61,W
097A:  MOVWF  78
097B:  MOVF   62,W
097C:  MOVWF  79
097D:  MOVF   63,W
097E:  MOVWF  7A
.................... } 
....................  
.................... void display_current_point (float position) { 
....................    LED(position); 
*
1800:  BSF    03.5
1801:  MOVF   29,W
1802:  MOVWF  2D
1803:  MOVF   28,W
1804:  MOVWF  2C
1805:  MOVF   27,W
1806:  MOVWF  2B
1807:  MOVF   26,W
1808:  MOVWF  2A
....................    lcd_gotoxy(1, 3); 
*
1AE0:  MOVLW  01
1AE1:  MOVWF  3A
1AE2:  MOVLW  03
1AE3:  MOVWF  3B
1AE4:  BCF    0A.4
1AE5:  BCF    0A.3
1AE6:  BCF    03.5
1AE7:  CALL   669
1AE8:  BSF    0A.4
1AE9:  BSF    0A.3
....................    printf(lcd_putc, "Current: %04.0f", position); 
1AEA:  MOVLW  67
1AEB:  BSF    03.6
1AEC:  MOVWF  0D
1AED:  MOVLW  00
1AEE:  MOVWF  0F
1AEF:  BCF    03.0
1AF0:  MOVLW  09
1AF1:  BSF    03.5
1AF2:  BCF    03.6
1AF3:  MOVWF  2C
*
1B72:  MOVLW  43
1B73:  MOVWF  04
1B74:  MOVF   29,W
1B75:  MOVWF  2F
1B76:  MOVF   28,W
1B77:  MOVWF  2E
1B78:  MOVF   27,W
1B79:  MOVWF  2D
1B7A:  MOVF   26,W
1B7B:  MOVWF  2C
1B7C:  CLRF   30
1B7D:  BCF    0A.4
1B7E:  BCF    03.5
1B7F:  CALL   419
1B80:  BSF    0A.4
1B81:  BSF    0A.3
1B82:  BCF    0A.4
1B83:  GOTO   623 (RETURN)
.................... } 
.................... float ReadButton() { 
....................    if(input(NUT_3)==1) { 
*
1000:  BSF    03.5
1001:  BSF    06.6
1002:  BCF    03.5
1003:  BTFSS  06.6
1004:  GOTO   00C
....................       if(temp==0) { 
1005:  MOVF   3E,F
1006:  BTFSS  03.2
1007:  GOTO   00C
....................          flag=flag+1; 
1008:  MOVLW  01
1009:  ADDWF  2C,F
100A:  BTFSC  03.0
100B:  INCF   2D,F
....................       } 
....................    } 
....................    switch(flag) { 
100C:  MOVF   2C,W
100D:  MOVWF  77
100E:  MOVF   2D,W
100F:  MOVWF  7A
1010:  MOVF   7A,W
1011:  BTFSS  03.2
1012:  GOTO   017
1013:  MOVLW  01
1014:  SUBWF  77,W
1015:  BTFSC  03.2
1016:  GOTO   034
1017:  MOVF   7A,W
1018:  BTFSS  03.2
1019:  GOTO   01E
101A:  MOVLW  02
101B:  SUBWF  77,W
101C:  BTFSC  03.2
101D:  GOTO   0EB
101E:  MOVF   7A,W
101F:  BTFSS  03.2
1020:  GOTO   025
1021:  MOVLW  03
1022:  SUBWF  77,W
1023:  BTFSC  03.2
1024:  GOTO   1A0
1025:  MOVF   7A,W
1026:  BTFSS  03.2
1027:  GOTO   02C
1028:  MOVLW  04
1029:  SUBWF  77,W
102A:  BTFSC  03.2
102B:  GOTO   255
102C:  MOVF   7A,W
102D:  BTFSS  03.2
102E:  GOTO   033
102F:  MOVLW  05
1030:  SUBWF  77,W
1031:  BTFSC  03.2
1032:  GOTO   25A
1033:  GOTO   260
....................       case 1: 
....................          setPosion = SET_HUNDREDS; 
1034:  MOVLW  01
1035:  BSF    03.5
1036:  MOVWF  24
....................          if(input(NUT_1)==1) { 
1037:  BSF    06.4
1038:  BCF    03.5
1039:  BTFSS  06.4
103A:  GOTO   090
....................             if(temp1==0) { 
103B:  MOVF   3F,F
103C:  BTFSS  03.2
103D:  GOTO   090
....................                x1=x1+1; 
103E:  BCF    03.1
103F:  CLRF   2B
1040:  BTFSC  0B.7
1041:  BSF    2B.7
1042:  BCF    0B.7
1043:  MOVF   31,W
1044:  BSF    03.6
1045:  MOVWF  19
1046:  BCF    03.6
1047:  MOVF   30,W
1048:  BSF    03.6
1049:  MOVWF  18
104A:  BCF    03.6
104B:  MOVF   2F,W
104C:  BSF    03.6
104D:  MOVWF  17
104E:  BCF    03.6
104F:  MOVF   2E,W
1050:  BSF    03.6
1051:  MOVWF  16
1052:  CLRF   1D
1053:  CLRF   1C
1054:  CLRF   1B
1055:  MOVLW  7F
1056:  MOVWF  1A
1057:  BCF    0A.4
1058:  BCF    03.6
1059:  CALL   1E9
105A:  BSF    0A.4
105B:  BTFSC  2B.7
105C:  BSF    0B.7
105D:  MOVF   7A,W
105E:  MOVWF  31
105F:  MOVF   79,W
1060:  MOVWF  30
1061:  MOVF   78,W
1062:  MOVWF  2F
1063:  MOVF   77,W
1064:  MOVWF  2E
1065:  CLRF   2B
1066:  BTFSC  0B.7
1067:  BSF    2B.7
1068:  BCF    0B.7
....................                if (x1>=6) { 
1069:  BSF    03.5
106A:  CLRF   6D
106B:  CLRF   6C
106C:  MOVLW  40
106D:  MOVWF  6B
106E:  MOVLW  81
106F:  MOVWF  6A
1070:  BCF    03.5
1071:  MOVF   31,W
1072:  BSF    03.6
1073:  MOVWF  13
1074:  BCF    03.6
1075:  MOVF   30,W
1076:  BSF    03.6
1077:  MOVWF  12
1078:  BCF    03.6
1079:  MOVF   2F,W
107A:  BSF    03.6
107B:  MOVWF  11
107C:  BCF    03.6
107D:  MOVF   2E,W
107E:  BSF    03.6
107F:  MOVWF  10
1080:  BCF    0A.4
1081:  BCF    03.6
1082:  CALL   32F
1083:  BSF    0A.4
1084:  BTFSC  2B.7
1085:  BSF    0B.7
1086:  BTFSC  03.0
1087:  GOTO   08A
1088:  BTFSS  03.2
1089:  GOTO   090
....................                   x1=5; 
108A:  CLRF   31
108B:  CLRF   30
108C:  MOVLW  20
108D:  MOVWF  2F
108E:  MOVLW  81
108F:  MOVWF  2E
....................                } 
....................             } 
....................          } 
....................          if(input(NUT_2)==1) { 
1090:  BSF    03.5
1091:  BSF    06.5
1092:  BCF    03.5
1093:  BTFSS  06.5
1094:  GOTO   0EA
....................             if(temp2==0) { 
1095:  MOVF   40,F
1096:  BTFSS  03.2
1097:  GOTO   0EA
....................                x1=x1-1; 
1098:  BSF    03.1
1099:  CLRF   2B
109A:  BTFSC  0B.7
109B:  BSF    2B.7
109C:  BCF    0B.7
109D:  MOVF   31,W
109E:  BSF    03.6
109F:  MOVWF  19
10A0:  BCF    03.6
10A1:  MOVF   30,W
10A2:  BSF    03.6
10A3:  MOVWF  18
10A4:  BCF    03.6
10A5:  MOVF   2F,W
10A6:  BSF    03.6
10A7:  MOVWF  17
10A8:  BCF    03.6
10A9:  MOVF   2E,W
10AA:  BSF    03.6
10AB:  MOVWF  16
10AC:  CLRF   1D
10AD:  CLRF   1C
10AE:  CLRF   1B
10AF:  MOVLW  7F
10B0:  MOVWF  1A
10B1:  BCF    0A.4
10B2:  BCF    03.6
10B3:  CALL   1E9
10B4:  BSF    0A.4
10B5:  BTFSC  2B.7
10B6:  BSF    0B.7
10B7:  MOVF   7A,W
10B8:  MOVWF  31
10B9:  MOVF   79,W
10BA:  MOVWF  30
10BB:  MOVF   78,W
10BC:  MOVWF  2F
10BD:  MOVF   77,W
10BE:  MOVWF  2E
10BF:  CLRF   2B
10C0:  BTFSC  0B.7
10C1:  BSF    2B.7
10C2:  BCF    0B.7
....................                if(x1 <= -6) { 
10C3:  MOVF   31,W
10C4:  BSF    03.5
10C5:  MOVWF  6D
10C6:  BCF    03.5
10C7:  MOVF   30,W
10C8:  BSF    03.5
10C9:  MOVWF  6C
10CA:  BCF    03.5
10CB:  MOVF   2F,W
10CC:  BSF    03.5
10CD:  MOVWF  6B
10CE:  BCF    03.5
10CF:  MOVF   2E,W
10D0:  BSF    03.5
10D1:  MOVWF  6A
10D2:  BCF    03.5
10D3:  BSF    03.6
10D4:  CLRF   13
10D5:  CLRF   12
10D6:  MOVLW  C0
10D7:  MOVWF  11
10D8:  MOVLW  81
10D9:  MOVWF  10
10DA:  BCF    0A.4
10DB:  BCF    03.6
10DC:  CALL   32F
10DD:  BSF    0A.4
10DE:  BTFSC  2B.7
10DF:  BSF    0B.7
10E0:  BTFSC  03.0
10E1:  GOTO   0E4
10E2:  BTFSS  03.2
10E3:  GOTO   0EA
....................                   x1 = -5; 
10E4:  CLRF   31
10E5:  CLRF   30
10E6:  MOVLW  A0
10E7:  MOVWF  2F
10E8:  MOVLW  81
10E9:  MOVWF  2E
....................                } 
....................             } 
....................          } 
....................       break; 
10EA:  GOTO   260
....................  
....................       case 2: 
....................          setPosion = SET_DOZENS; 
10EB:  MOVLW  02
10EC:  BSF    03.5
10ED:  MOVWF  24
....................          if(input(NUT_1)==1) { 
10EE:  BSF    06.4
10EF:  BCF    03.5
10F0:  BTFSS  06.4
10F1:  GOTO   145
....................             if(temp1) { 
10F2:  MOVF   3F,F
10F3:  BTFSC  03.2
10F4:  GOTO   145
....................                x2=x2+1; 
10F5:  BCF    03.1
10F6:  CLRF   2B
10F7:  BTFSC  0B.7
10F8:  BSF    2B.7
10F9:  BCF    0B.7
10FA:  MOVF   35,W
10FB:  BSF    03.6
10FC:  MOVWF  19
10FD:  BCF    03.6
10FE:  MOVF   34,W
10FF:  BSF    03.6
1100:  MOVWF  18
1101:  BCF    03.6
1102:  MOVF   33,W
1103:  BSF    03.6
1104:  MOVWF  17
1105:  BCF    03.6
1106:  MOVF   32,W
1107:  BSF    03.6
1108:  MOVWF  16
1109:  CLRF   1D
110A:  CLRF   1C
110B:  CLRF   1B
110C:  MOVLW  7F
110D:  MOVWF  1A
110E:  BCF    0A.4
110F:  BCF    03.6
1110:  CALL   1E9
1111:  BSF    0A.4
1112:  BTFSC  2B.7
1113:  BSF    0B.7
1114:  MOVF   7A,W
1115:  MOVWF  35
1116:  MOVF   79,W
1117:  MOVWF  34
1118:  MOVF   78,W
1119:  MOVWF  33
111A:  MOVF   77,W
111B:  MOVWF  32
111C:  CLRF   2B
111D:  BTFSC  0B.7
111E:  BSF    2B.7
111F:  BCF    0B.7
....................                if(x2 >= 10) { 
1120:  BSF    03.5
1121:  CLRF   6D
1122:  CLRF   6C
1123:  MOVLW  20
1124:  MOVWF  6B
1125:  MOVLW  82
1126:  MOVWF  6A
1127:  BCF    03.5
1128:  MOVF   35,W
1129:  BSF    03.6
112A:  MOVWF  13
112B:  BCF    03.6
112C:  MOVF   34,W
112D:  BSF    03.6
112E:  MOVWF  12
112F:  BCF    03.6
1130:  MOVF   33,W
1131:  BSF    03.6
1132:  MOVWF  11
1133:  BCF    03.6
1134:  MOVF   32,W
1135:  BSF    03.6
1136:  MOVWF  10
1137:  BCF    0A.4
1138:  BCF    03.6
1139:  CALL   32F
113A:  BSF    0A.4
113B:  BTFSC  2B.7
113C:  BSF    0B.7
113D:  BTFSC  03.0
113E:  GOTO   141
113F:  BTFSS  03.2
1140:  GOTO   145
....................                   x2=0; 
1141:  CLRF   35
1142:  CLRF   34
1143:  CLRF   33
1144:  CLRF   32
....................                } 
....................             } 
....................          } 
....................          if(input(NUT_2)==1) { 
1145:  BSF    03.5
1146:  BSF    06.5
1147:  BCF    03.5
1148:  BTFSS  06.5
1149:  GOTO   19F
....................             if(temp2==0) { 
114A:  MOVF   40,F
114B:  BTFSS  03.2
114C:  GOTO   19F
....................                x2=x2-1; 
114D:  BSF    03.1
114E:  CLRF   2B
114F:  BTFSC  0B.7
1150:  BSF    2B.7
1151:  BCF    0B.7
1152:  MOVF   35,W
1153:  BSF    03.6
1154:  MOVWF  19
1155:  BCF    03.6
1156:  MOVF   34,W
1157:  BSF    03.6
1158:  MOVWF  18
1159:  BCF    03.6
115A:  MOVF   33,W
115B:  BSF    03.6
115C:  MOVWF  17
115D:  BCF    03.6
115E:  MOVF   32,W
115F:  BSF    03.6
1160:  MOVWF  16
1161:  CLRF   1D
1162:  CLRF   1C
1163:  CLRF   1B
1164:  MOVLW  7F
1165:  MOVWF  1A
1166:  BCF    0A.4
1167:  BCF    03.6
1168:  CALL   1E9
1169:  BSF    0A.4
116A:  BTFSC  2B.7
116B:  BSF    0B.7
116C:  MOVF   7A,W
116D:  MOVWF  35
116E:  MOVF   79,W
116F:  MOVWF  34
1170:  MOVF   78,W
1171:  MOVWF  33
1172:  MOVF   77,W
1173:  MOVWF  32
1174:  CLRF   2B
1175:  BTFSC  0B.7
1176:  BSF    2B.7
1177:  BCF    0B.7
....................                if(x2 <= -1) { 
1178:  MOVF   35,W
1179:  BSF    03.5
117A:  MOVWF  6D
117B:  BCF    03.5
117C:  MOVF   34,W
117D:  BSF    03.5
117E:  MOVWF  6C
117F:  BCF    03.5
1180:  MOVF   33,W
1181:  BSF    03.5
1182:  MOVWF  6B
1183:  BCF    03.5
1184:  MOVF   32,W
1185:  BSF    03.5
1186:  MOVWF  6A
1187:  BCF    03.5
1188:  BSF    03.6
1189:  CLRF   13
118A:  CLRF   12
118B:  MOVLW  80
118C:  MOVWF  11
118D:  MOVLW  7F
118E:  MOVWF  10
118F:  BCF    0A.4
1190:  BCF    03.6
1191:  CALL   32F
1192:  BSF    0A.4
1193:  BTFSC  2B.7
1194:  BSF    0B.7
1195:  BTFSC  03.0
1196:  GOTO   199
1197:  BTFSS  03.2
1198:  GOTO   19F
....................                   x2 = 9; 
1199:  CLRF   35
119A:  CLRF   34
119B:  MOVLW  10
119C:  MOVWF  33
119D:  MOVLW  82
119E:  MOVWF  32
....................                } 
....................             } 
....................          } 
....................       break; 
119F:  GOTO   260
....................       case 3: 
....................          setPosion = SET_UNITS; 
11A0:  MOVLW  03
11A1:  BSF    03.5
11A2:  MOVWF  24
....................          if(input(NUT_1)==1) { 
11A3:  BSF    06.4
11A4:  BCF    03.5
11A5:  BTFSS  06.4
11A6:  GOTO   1FA
....................             if (temp1==0) { 
11A7:  MOVF   3F,F
11A8:  BTFSS  03.2
11A9:  GOTO   1FA
....................                x3=x3+1; 
11AA:  BCF    03.1
11AB:  CLRF   2B
11AC:  BTFSC  0B.7
11AD:  BSF    2B.7
11AE:  BCF    0B.7
11AF:  MOVF   39,W
11B0:  BSF    03.6
11B1:  MOVWF  19
11B2:  BCF    03.6
11B3:  MOVF   38,W
11B4:  BSF    03.6
11B5:  MOVWF  18
11B6:  BCF    03.6
11B7:  MOVF   37,W
11B8:  BSF    03.6
11B9:  MOVWF  17
11BA:  BCF    03.6
11BB:  MOVF   36,W
11BC:  BSF    03.6
11BD:  MOVWF  16
11BE:  CLRF   1D
11BF:  CLRF   1C
11C0:  CLRF   1B
11C1:  MOVLW  7F
11C2:  MOVWF  1A
11C3:  BCF    0A.4
11C4:  BCF    03.6
11C5:  CALL   1E9
11C6:  BSF    0A.4
11C7:  BTFSC  2B.7
11C8:  BSF    0B.7
11C9:  MOVF   7A,W
11CA:  MOVWF  39
11CB:  MOVF   79,W
11CC:  MOVWF  38
11CD:  MOVF   78,W
11CE:  MOVWF  37
11CF:  MOVF   77,W
11D0:  MOVWF  36
11D1:  CLRF   2B
11D2:  BTFSC  0B.7
11D3:  BSF    2B.7
11D4:  BCF    0B.7
....................                if(x3>=10) { 
11D5:  BSF    03.5
11D6:  CLRF   6D
11D7:  CLRF   6C
11D8:  MOVLW  20
11D9:  MOVWF  6B
11DA:  MOVLW  82
11DB:  MOVWF  6A
11DC:  BCF    03.5
11DD:  MOVF   39,W
11DE:  BSF    03.6
11DF:  MOVWF  13
11E0:  BCF    03.6
11E1:  MOVF   38,W
11E2:  BSF    03.6
11E3:  MOVWF  12
11E4:  BCF    03.6
11E5:  MOVF   37,W
11E6:  BSF    03.6
11E7:  MOVWF  11
11E8:  BCF    03.6
11E9:  MOVF   36,W
11EA:  BSF    03.6
11EB:  MOVWF  10
11EC:  BCF    0A.4
11ED:  BCF    03.6
11EE:  CALL   32F
11EF:  BSF    0A.4
11F0:  BTFSC  2B.7
11F1:  BSF    0B.7
11F2:  BTFSC  03.0
11F3:  GOTO   1F6
11F4:  BTFSS  03.2
11F5:  GOTO   1FA
....................                   x3=0; 
11F6:  CLRF   39
11F7:  CLRF   38
11F8:  CLRF   37
11F9:  CLRF   36
....................                } 
....................             } 
....................          } 
....................          if(input(NUT_2)==1) { 
11FA:  BSF    03.5
11FB:  BSF    06.5
11FC:  BCF    03.5
11FD:  BTFSS  06.5
11FE:  GOTO   254
....................             if (temp2==0) { 
11FF:  MOVF   40,F
1200:  BTFSS  03.2
1201:  GOTO   254
....................                x3=x3-1; 
1202:  BSF    03.1
1203:  CLRF   2B
1204:  BTFSC  0B.7
1205:  BSF    2B.7
1206:  BCF    0B.7
1207:  MOVF   39,W
1208:  BSF    03.6
1209:  MOVWF  19
120A:  BCF    03.6
120B:  MOVF   38,W
120C:  BSF    03.6
120D:  MOVWF  18
120E:  BCF    03.6
120F:  MOVF   37,W
1210:  BSF    03.6
1211:  MOVWF  17
1212:  BCF    03.6
1213:  MOVF   36,W
1214:  BSF    03.6
1215:  MOVWF  16
1216:  CLRF   1D
1217:  CLRF   1C
1218:  CLRF   1B
1219:  MOVLW  7F
121A:  MOVWF  1A
121B:  BCF    0A.4
121C:  BCF    03.6
121D:  CALL   1E9
121E:  BSF    0A.4
121F:  BTFSC  2B.7
1220:  BSF    0B.7
1221:  MOVF   7A,W
1222:  MOVWF  39
1223:  MOVF   79,W
1224:  MOVWF  38
1225:  MOVF   78,W
1226:  MOVWF  37
1227:  MOVF   77,W
1228:  MOVWF  36
1229:  CLRF   2B
122A:  BTFSC  0B.7
122B:  BSF    2B.7
122C:  BCF    0B.7
....................                if(x3 <= -1) { 
122D:  MOVF   39,W
122E:  BSF    03.5
122F:  MOVWF  6D
1230:  BCF    03.5
1231:  MOVF   38,W
1232:  BSF    03.5
1233:  MOVWF  6C
1234:  BCF    03.5
1235:  MOVF   37,W
1236:  BSF    03.5
1237:  MOVWF  6B
1238:  BCF    03.5
1239:  MOVF   36,W
123A:  BSF    03.5
123B:  MOVWF  6A
123C:  BCF    03.5
123D:  BSF    03.6
123E:  CLRF   13
123F:  CLRF   12
1240:  MOVLW  80
1241:  MOVWF  11
1242:  MOVLW  7F
1243:  MOVWF  10
1244:  BCF    0A.4
1245:  BCF    03.6
1246:  CALL   32F
1247:  BSF    0A.4
1248:  BTFSC  2B.7
1249:  BSF    0B.7
124A:  BTFSC  03.0
124B:  GOTO   24E
124C:  BTFSS  03.2
124D:  GOTO   254
....................                   x3 = 9; 
124E:  CLRF   39
124F:  CLRF   38
1250:  MOVLW  10
1251:  MOVWF  37
1252:  MOVLW  82
1253:  MOVWF  36
....................                } 
....................             } 
....................          } 
....................       break; 
1254:  GOTO   260
....................       case 4: 
....................          setPosion = RUN; 
1255:  MOVLW  04
1256:  BSF    03.5
1257:  MOVWF  24
....................       break; 
1258:  BCF    03.5
1259:  GOTO   260
....................       case 5: 
....................          setPosion = STOP; 
125A:  MOVLW  05
125B:  BSF    03.5
125C:  MOVWF  24
....................          flag=0; 
125D:  BCF    03.5
125E:  CLRF   2D
125F:  CLRF   2C
....................       break; 
1260:  CLRF   2B
1261:  BTFSC  0B.7
1262:  BSF    2B.7
1263:  BCF    0B.7
....................    } 
....................    if(x1>=0) { 
1264:  BSF    03.5
1265:  CLRF   6D
1266:  CLRF   6C
1267:  CLRF   6B
1268:  CLRF   6A
1269:  BCF    03.5
126A:  MOVF   31,W
126B:  BSF    03.6
126C:  MOVWF  13
126D:  BCF    03.6
126E:  MOVF   30,W
126F:  BSF    03.6
1270:  MOVWF  12
1271:  BCF    03.6
1272:  MOVF   2F,W
1273:  BSF    03.6
1274:  MOVWF  11
1275:  BCF    03.6
1276:  MOVF   2E,W
1277:  BSF    03.6
1278:  MOVWF  10
1279:  BCF    0A.4
127A:  BCF    03.6
127B:  CALL   32F
127C:  BSF    0A.4
127D:  BTFSC  2B.7
127E:  BSF    0B.7
127F:  BTFSC  03.0
1280:  GOTO   283
1281:  BTFSS  03.2
1282:  GOTO   339
1283:  CLRF   2B
1284:  BTFSC  0B.7
1285:  BSF    2B.7
1286:  BCF    0B.7
....................       vi_Tri= x1*100+x2*10+x3; 
1287:  MOVF   31,W
1288:  BSF    03.6
1289:  MOVWF  1D
128A:  BCF    03.6
128B:  MOVF   30,W
128C:  BSF    03.6
128D:  MOVWF  1C
128E:  BCF    03.6
128F:  MOVF   2F,W
1290:  BSF    03.6
1291:  MOVWF  1B
1292:  BCF    03.6
1293:  MOVF   2E,W
1294:  BSF    03.6
1295:  MOVWF  1A
1296:  CLRF   21
1297:  CLRF   20
1298:  MOVLW  48
1299:  MOVWF  1F
129A:  MOVLW  85
129B:  MOVWF  1E
129C:  BCF    0A.4
129D:  BCF    03.6
129E:  CALL   0A6
129F:  BSF    0A.4
12A0:  BTFSC  2B.7
12A1:  BSF    0B.7
12A2:  MOVF   7A,W
12A3:  BSF    03.5
12A4:  MOVWF  29
12A5:  MOVF   79,W
12A6:  MOVWF  28
12A7:  MOVF   78,W
12A8:  MOVWF  27
12A9:  MOVF   77,W
12AA:  MOVWF  26
12AB:  BCF    03.5
12AC:  CLRF   2B
12AD:  BTFSC  0B.7
12AE:  BSF    2B.7
12AF:  BCF    0B.7
12B0:  MOVF   35,W
12B1:  BSF    03.6
12B2:  MOVWF  1D
12B3:  BCF    03.6
12B4:  MOVF   34,W
12B5:  BSF    03.6
12B6:  MOVWF  1C
12B7:  BCF    03.6
12B8:  MOVF   33,W
12B9:  BSF    03.6
12BA:  MOVWF  1B
12BB:  BCF    03.6
12BC:  MOVF   32,W
12BD:  BSF    03.6
12BE:  MOVWF  1A
12BF:  CLRF   21
12C0:  CLRF   20
12C1:  MOVLW  20
12C2:  MOVWF  1F
12C3:  MOVLW  82
12C4:  MOVWF  1E
12C5:  BCF    0A.4
12C6:  BCF    03.6
12C7:  CALL   0A6
12C8:  BSF    0A.4
12C9:  BTFSC  2B.7
12CA:  BSF    0B.7
12CB:  BCF    03.1
12CC:  CLRF   2B
12CD:  BTFSC  0B.7
12CE:  BSF    2B.7
12CF:  BCF    0B.7
12D0:  BSF    03.5
12D1:  MOVF   29,W
12D2:  BCF    03.5
12D3:  BSF    03.6
12D4:  MOVWF  19
12D5:  BSF    03.5
12D6:  BCF    03.6
12D7:  MOVF   28,W
12D8:  BCF    03.5
12D9:  BSF    03.6
12DA:  MOVWF  18
12DB:  BSF    03.5
12DC:  BCF    03.6
12DD:  MOVF   27,W
12DE:  BCF    03.5
12DF:  BSF    03.6
12E0:  MOVWF  17
12E1:  BSF    03.5
12E2:  BCF    03.6
12E3:  MOVF   26,W
12E4:  BCF    03.5
12E5:  BSF    03.6
12E6:  MOVWF  16
12E7:  MOVF   7A,W
12E8:  MOVWF  1D
12E9:  MOVF   79,W
12EA:  MOVWF  1C
12EB:  MOVF   78,W
12EC:  MOVWF  1B
12ED:  MOVF   77,W
12EE:  MOVWF  1A
12EF:  BCF    0A.4
12F0:  BCF    03.6
12F1:  CALL   1E9
12F2:  BSF    0A.4
12F3:  BTFSC  2B.7
12F4:  BSF    0B.7
12F5:  MOVF   7A,W
12F6:  BSF    03.5
12F7:  MOVWF  29
12F8:  MOVF   79,W
12F9:  MOVWF  28
12FA:  MOVF   78,W
12FB:  MOVWF  27
12FC:  MOVF   77,W
12FD:  MOVWF  26
12FE:  BCF    03.1
12FF:  BCF    03.5
1300:  CLRF   2B
1301:  BTFSC  0B.7
1302:  BSF    2B.7
1303:  BCF    0B.7
1304:  BSF    03.5
1305:  MOVF   29,W
1306:  BCF    03.5
1307:  BSF    03.6
1308:  MOVWF  19
1309:  BSF    03.5
130A:  BCF    03.6
130B:  MOVF   28,W
130C:  BCF    03.5
130D:  BSF    03.6
130E:  MOVWF  18
130F:  BSF    03.5
1310:  BCF    03.6
1311:  MOVF   27,W
1312:  BCF    03.5
1313:  BSF    03.6
1314:  MOVWF  17
1315:  BSF    03.5
1316:  BCF    03.6
1317:  MOVF   26,W
1318:  BCF    03.5
1319:  BSF    03.6
131A:  MOVWF  16
131B:  BCF    03.6
131C:  MOVF   39,W
131D:  BSF    03.6
131E:  MOVWF  1D
131F:  BCF    03.6
1320:  MOVF   38,W
1321:  BSF    03.6
1322:  MOVWF  1C
1323:  BCF    03.6
1324:  MOVF   37,W
1325:  BSF    03.6
1326:  MOVWF  1B
1327:  BCF    03.6
1328:  MOVF   36,W
1329:  BSF    03.6
132A:  MOVWF  1A
132B:  BCF    0A.4
132C:  BCF    03.6
132D:  CALL   1E9
132E:  BSF    0A.4
132F:  BTFSC  2B.7
1330:  BSF    0B.7
1331:  MOVF   7A,W
1332:  MOVWF  3D
1333:  MOVF   79,W
1334:  MOVWF  3C
1335:  MOVF   78,W
1336:  MOVWF  3B
1337:  MOVF   77,W
1338:  MOVWF  3A
1339:  CLRF   2B
133A:  BTFSC  0B.7
133B:  BSF    2B.7
133C:  BCF    0B.7
....................    } 
....................  
....................    if(x1<0) { 
133D:  MOVF   31,W
133E:  BSF    03.5
133F:  MOVWF  6D
1340:  BCF    03.5
1341:  MOVF   30,W
1342:  BSF    03.5
1343:  MOVWF  6C
1344:  BCF    03.5
1345:  MOVF   2F,W
1346:  BSF    03.5
1347:  MOVWF  6B
1348:  BCF    03.5
1349:  MOVF   2E,W
134A:  BSF    03.5
134B:  MOVWF  6A
134C:  BCF    03.5
134D:  BSF    03.6
134E:  CLRF   13
134F:  CLRF   12
1350:  CLRF   11
1351:  CLRF   10
1352:  BCF    0A.4
1353:  BCF    03.6
1354:  CALL   32F
1355:  BSF    0A.4
1356:  BTFSC  2B.7
1357:  BSF    0B.7
1358:  BTFSS  03.0
1359:  GOTO   442
....................       vi_Tri= (-1)*(-x1*100+x2*10+x3); 
135A:  MOVF   2E,W
135B:  BSF    03.5
135C:  MOVWF  26
135D:  BCF    03.5
135E:  MOVF   2F,W
135F:  XORLW  80
1360:  BSF    03.5
1361:  MOVWF  27
1362:  BCF    03.5
1363:  MOVF   30,W
1364:  BSF    03.5
1365:  MOVWF  28
1366:  BCF    03.5
1367:  MOVF   31,W
1368:  BSF    03.5
1369:  MOVWF  29
136A:  BCF    03.5
136B:  CLRF   2B
136C:  BTFSC  0B.7
136D:  BSF    2B.7
136E:  BCF    0B.7
136F:  BSF    03.5
1370:  MOVF   29,W
1371:  BCF    03.5
1372:  BSF    03.6
1373:  MOVWF  1D
1374:  BSF    03.5
1375:  BCF    03.6
1376:  MOVF   28,W
1377:  BCF    03.5
1378:  BSF    03.6
1379:  MOVWF  1C
137A:  BSF    03.5
137B:  BCF    03.6
137C:  MOVF   27,W
137D:  BCF    03.5
137E:  BSF    03.6
137F:  MOVWF  1B
1380:  BSF    03.5
1381:  BCF    03.6
1382:  MOVF   26,W
1383:  BCF    03.5
1384:  BSF    03.6
1385:  MOVWF  1A
1386:  CLRF   21
1387:  CLRF   20
1388:  MOVLW  48
1389:  MOVWF  1F
138A:  MOVLW  85
138B:  MOVWF  1E
138C:  BCF    0A.4
138D:  BCF    03.6
138E:  CALL   0A6
138F:  BSF    0A.4
1390:  BTFSC  2B.7
1391:  BSF    0B.7
1392:  MOVF   7A,W
1393:  BSF    03.5
1394:  MOVWF  29
1395:  MOVF   79,W
1396:  MOVWF  28
1397:  MOVF   78,W
1398:  MOVWF  27
1399:  MOVF   77,W
139A:  MOVWF  26
139B:  BCF    03.5
139C:  CLRF   2B
139D:  BTFSC  0B.7
139E:  BSF    2B.7
139F:  BCF    0B.7
13A0:  MOVF   35,W
13A1:  BSF    03.6
13A2:  MOVWF  1D
13A3:  BCF    03.6
13A4:  MOVF   34,W
13A5:  BSF    03.6
13A6:  MOVWF  1C
13A7:  BCF    03.6
13A8:  MOVF   33,W
13A9:  BSF    03.6
13AA:  MOVWF  1B
13AB:  BCF    03.6
13AC:  MOVF   32,W
13AD:  BSF    03.6
13AE:  MOVWF  1A
13AF:  CLRF   21
13B0:  CLRF   20
13B1:  MOVLW  20
13B2:  MOVWF  1F
13B3:  MOVLW  82
13B4:  MOVWF  1E
13B5:  BCF    0A.4
13B6:  BCF    03.6
13B7:  CALL   0A6
13B8:  BSF    0A.4
13B9:  BTFSC  2B.7
13BA:  BSF    0B.7
13BB:  BCF    03.1
13BC:  CLRF   2B
13BD:  BTFSC  0B.7
13BE:  BSF    2B.7
13BF:  BCF    0B.7
13C0:  BSF    03.5
13C1:  MOVF   29,W
13C2:  BCF    03.5
13C3:  BSF    03.6
13C4:  MOVWF  19
13C5:  BSF    03.5
13C6:  BCF    03.6
13C7:  MOVF   28,W
13C8:  BCF    03.5
13C9:  BSF    03.6
13CA:  MOVWF  18
13CB:  BSF    03.5
13CC:  BCF    03.6
13CD:  MOVF   27,W
13CE:  BCF    03.5
13CF:  BSF    03.6
13D0:  MOVWF  17
13D1:  BSF    03.5
13D2:  BCF    03.6
13D3:  MOVF   26,W
13D4:  BCF    03.5
13D5:  BSF    03.6
13D6:  MOVWF  16
13D7:  MOVF   7A,W
13D8:  MOVWF  1D
13D9:  MOVF   79,W
13DA:  MOVWF  1C
13DB:  MOVF   78,W
13DC:  MOVWF  1B
13DD:  MOVF   77,W
13DE:  MOVWF  1A
13DF:  BCF    0A.4
13E0:  BCF    03.6
13E1:  CALL   1E9
13E2:  BSF    0A.4
13E3:  BTFSC  2B.7
13E4:  BSF    0B.7
13E5:  MOVF   7A,W
13E6:  BSF    03.5
13E7:  MOVWF  29
13E8:  MOVF   79,W
13E9:  MOVWF  28
13EA:  MOVF   78,W
13EB:  MOVWF  27
13EC:  MOVF   77,W
13ED:  MOVWF  26
13EE:  BCF    03.1
13EF:  BCF    03.5
13F0:  CLRF   2B
13F1:  BTFSC  0B.7
13F2:  BSF    2B.7
13F3:  BCF    0B.7
13F4:  BSF    03.5
13F5:  MOVF   29,W
13F6:  BCF    03.5
13F7:  BSF    03.6
13F8:  MOVWF  19
13F9:  BSF    03.5
13FA:  BCF    03.6
13FB:  MOVF   28,W
13FC:  BCF    03.5
13FD:  BSF    03.6
13FE:  MOVWF  18
13FF:  BSF    03.5
1400:  BCF    03.6
1401:  MOVF   27,W
1402:  BCF    03.5
1403:  BSF    03.6
1404:  MOVWF  17
1405:  BSF    03.5
1406:  BCF    03.6
1407:  MOVF   26,W
1408:  BCF    03.5
1409:  BSF    03.6
140A:  MOVWF  16
140B:  BCF    03.6
140C:  MOVF   39,W
140D:  BSF    03.6
140E:  MOVWF  1D
140F:  BCF    03.6
1410:  MOVF   38,W
1411:  BSF    03.6
1412:  MOVWF  1C
1413:  BCF    03.6
1414:  MOVF   37,W
1415:  BSF    03.6
1416:  MOVWF  1B
1417:  BCF    03.6
1418:  MOVF   36,W
1419:  BSF    03.6
141A:  MOVWF  1A
141B:  BCF    0A.4
141C:  BCF    03.6
141D:  CALL   1E9
141E:  BSF    0A.4
141F:  BTFSC  2B.7
1420:  BSF    0B.7
1421:  CLRF   2B
1422:  BTFSC  0B.7
1423:  BSF    2B.7
1424:  BCF    0B.7
1425:  BSF    03.6
1426:  CLRF   1D
1427:  CLRF   1C
1428:  MOVLW  80
1429:  MOVWF  1B
142A:  MOVLW  7F
142B:  MOVWF  1A
142C:  MOVF   7A,W
142D:  MOVWF  21
142E:  MOVF   79,W
142F:  MOVWF  20
1430:  MOVF   78,W
1431:  MOVWF  1F
1432:  MOVF   77,W
1433:  MOVWF  1E
1434:  BCF    0A.4
1435:  BCF    03.6
1436:  CALL   0A6
1437:  BSF    0A.4
1438:  BTFSC  2B.7
1439:  BSF    0B.7
143A:  MOVF   7A,W
143B:  MOVWF  3D
143C:  MOVF   79,W
143D:  MOVWF  3C
143E:  MOVF   78,W
143F:  MOVWF  3B
1440:  MOVF   77,W
1441:  MOVWF  3A
1442:  CLRF   2B
1443:  BTFSC  0B.7
1444:  BSF    2B.7
1445:  BCF    0B.7
....................    } 
....................    if(vi_Tri > 500) 
1446:  BSF    03.5
1447:  CLRF   6D
1448:  CLRF   6C
1449:  MOVLW  7A
144A:  MOVWF  6B
144B:  MOVLW  87
144C:  MOVWF  6A
144D:  BCF    03.5
144E:  MOVF   3D,W
144F:  BSF    03.6
1450:  MOVWF  13
1451:  BCF    03.6
1452:  MOVF   3C,W
1453:  BSF    03.6
1454:  MOVWF  12
1455:  BCF    03.6
1456:  MOVF   3B,W
1457:  BSF    03.6
1458:  MOVWF  11
1459:  BCF    03.6
145A:  MOVF   3A,W
145B:  BSF    03.6
145C:  MOVWF  10
145D:  BCF    0A.4
145E:  BCF    03.6
145F:  CALL   32F
1460:  BSF    0A.4
1461:  BTFSC  2B.7
1462:  BSF    0B.7
1463:  BTFSS  03.0
1464:  GOTO   46B
....................       vi_Tri = 500; 
1465:  CLRF   3D
1466:  CLRF   3C
1467:  MOVLW  7A
1468:  MOVWF  3B
1469:  MOVLW  87
146A:  MOVWF  3A
146B:  CLRF   2B
146C:  BTFSC  0B.7
146D:  BSF    2B.7
146E:  BCF    0B.7
....................    if(vi_Tri < -500) 
146F:  MOVF   3D,W
1470:  BSF    03.5
1471:  MOVWF  6D
1472:  BCF    03.5
1473:  MOVF   3C,W
1474:  BSF    03.5
1475:  MOVWF  6C
1476:  BCF    03.5
1477:  MOVF   3B,W
1478:  BSF    03.5
1479:  MOVWF  6B
147A:  BCF    03.5
147B:  MOVF   3A,W
147C:  BSF    03.5
147D:  MOVWF  6A
147E:  BCF    03.5
147F:  BSF    03.6
1480:  CLRF   13
1481:  CLRF   12
1482:  MOVLW  FA
1483:  MOVWF  11
1484:  MOVLW  87
1485:  MOVWF  10
1486:  BCF    0A.4
1487:  BCF    03.6
1488:  CALL   32F
1489:  BSF    0A.4
148A:  BTFSC  2B.7
148B:  BSF    0B.7
148C:  BTFSS  03.0
148D:  GOTO   494
....................       vi_Tri = -500; 
148E:  CLRF   3D
148F:  CLRF   3C
1490:  MOVLW  FA
1491:  MOVWF  3B
1492:  MOVLW  87
1493:  MOVWF  3A
....................  
....................    temp=input(NUT_3); 
1494:  BSF    03.5
1495:  BSF    06.6
1496:  BCF    03.5
1497:  CLRF   3E
1498:  BTFSC  06.6
1499:  INCF   3E,F
....................    temp1=input(NUT_1); 
149A:  BSF    03.5
149B:  BSF    06.4
149C:  BCF    03.5
149D:  CLRF   3F
149E:  BTFSC  06.4
149F:  INCF   3F,F
....................    temp2=input(NUT_2); 
14A0:  BSF    03.5
14A1:  BSF    06.5
14A2:  BCF    03.5
14A3:  CLRF   40
14A4:  BTFSC  06.5
14A5:  INCF   40,F
....................    return vi_Tri; 
14A6:  MOVF   3A,W
14A7:  MOVWF  77
14A8:  MOVF   3B,W
14A9:  MOVWF  78
14AA:  MOVF   3C,W
14AB:  MOVWF  79
14AC:  MOVF   3D,W
14AD:  MOVWF  7A
14AE:  BSF    0A.3
14AF:  BCF    0A.4
14B0:  GOTO   5F9 (RETURN)
.................... } 
....................  
.................... void display_position (float position) { 
....................    lcd_gotoxy(1,1); 
*
0748:  MOVLW  01
0749:  BSF    03.5
074A:  MOVWF  3A
074B:  MOVWF  3B
074C:  BCF    03.5
074D:  CALL   669
....................    printf(lcd_putc,"VI TRI:"); 
074E:  MOVLW  6F
074F:  BSF    03.6
0750:  MOVWF  0D
0751:  MOVLW  00
0752:  MOVWF  0F
0753:  BCF    03.6
0754:  CALL   6D4
....................    lcd_gotoxy(10,1); 
0755:  MOVLW  0A
0756:  BSF    03.5
0757:  MOVWF  3A
0758:  MOVLW  01
0759:  MOVWF  3B
075A:  BCF    03.5
075B:  CALL   669
....................    printf(lcd_putc,"%04.0f",vi_tri); 
075C:  MOVLW  43
075D:  MOVWF  04
075E:  MOVF   3D,W
075F:  BSF    03.5
0760:  MOVWF  2F
0761:  BCF    03.5
0762:  MOVF   3C,W
0763:  BSF    03.5
0764:  MOVWF  2E
0765:  BCF    03.5
0766:  MOVF   3B,W
0767:  BSF    03.5
0768:  MOVWF  2D
0769:  BCF    03.5
076A:  MOVF   3A,W
076B:  BSF    03.5
076C:  MOVWF  2C
076D:  CLRF   30
076E:  BSF    0A.3
076F:  BCF    03.5
0770:  CALL   419
0771:  BCF    0A.3
0772:  BSF    0A.3
0773:  BCF    0A.4
0774:  GOTO   60F (RETURN)
.................... } 
....................  
.................... void display_speed (long pulse) { 
....................    float temp; 
....................    if(input(In_dir) == 0) 
*
14B1:  BSF    03.5
14B2:  BSF    06.1
14B3:  BCF    03.5
14B4:  BTFSC  06.1
14B5:  GOTO   54C
....................       temp = -(float) pulse*60/200; 
14B6:  BSF    03.5
14B7:  MOVF   27,W
14B8:  BCF    03.5
14B9:  BSF    03.6
14BA:  MOVWF  17
14BB:  BSF    03.5
14BC:  BCF    03.6
14BD:  MOVF   26,W
14BE:  BCF    03.5
14BF:  BSF    03.6
14C0:  MOVWF  16
*
14DD:  MOVF   77,W
14DE:  BSF    03.5
14DF:  BCF    03.6
14E0:  MOVWF  2C
14E1:  MOVF   78,W
14E2:  XORLW  80
14E3:  MOVWF  2D
14E4:  MOVF   79,W
14E5:  MOVWF  2E
14E6:  MOVF   7A,W
14E7:  MOVWF  2F
14E8:  BCF    03.5
14E9:  CLRF   2B
14EA:  BTFSC  0B.7
14EB:  BSF    2B.7
14EC:  BCF    0B.7
14ED:  BSF    03.5
14EE:  MOVF   2F,W
14EF:  BCF    03.5
14F0:  BSF    03.6
14F1:  MOVWF  1D
14F2:  BSF    03.5
14F3:  BCF    03.6
14F4:  MOVF   2E,W
14F5:  BCF    03.5
14F6:  BSF    03.6
14F7:  MOVWF  1C
14F8:  BSF    03.5
14F9:  BCF    03.6
14FA:  MOVF   2D,W
14FB:  BCF    03.5
14FC:  BSF    03.6
14FD:  MOVWF  1B
14FE:  BSF    03.5
14FF:  BCF    03.6
1500:  MOVF   2C,W
1501:  BCF    03.5
1502:  BSF    03.6
1503:  MOVWF  1A
1504:  CLRF   21
1505:  CLRF   20
1506:  MOVLW  70
1507:  MOVWF  1F
1508:  MOVLW  84
1509:  MOVWF  1E
150A:  BCF    0A.4
150B:  BCF    03.6
150C:  CALL   0A6
150D:  BSF    0A.4
150E:  BTFSC  2B.7
150F:  BSF    0B.7
1510:  MOVF   7A,W
1511:  BSF    03.5
1512:  MOVWF  2F
1513:  MOVF   79,W
1514:  MOVWF  2E
1515:  MOVF   78,W
1516:  MOVWF  2D
1517:  MOVF   77,W
1518:  MOVWF  2C
1519:  BCF    03.5
151A:  CLRF   2B
151B:  BTFSC  0B.7
151C:  BSF    2B.7
151D:  BCF    0B.7
151E:  BSF    03.5
151F:  MOVF   2F,W
1520:  BCF    03.5
1521:  BSF    03.6
1522:  MOVWF  1D
1523:  BSF    03.5
1524:  BCF    03.6
1525:  MOVF   2E,W
1526:  BCF    03.5
1527:  BSF    03.6
1528:  MOVWF  1C
1529:  BSF    03.5
152A:  BCF    03.6
152B:  MOVF   2D,W
152C:  BCF    03.5
152D:  BSF    03.6
152E:  MOVWF  1B
152F:  BSF    03.5
1530:  BCF    03.6
1531:  MOVF   2C,W
1532:  BCF    03.5
1533:  BSF    03.6
1534:  MOVWF  1A
1535:  CLRF   21
1536:  CLRF   20
1537:  MOVLW  48
1538:  MOVWF  1F
1539:  MOVLW  86
153A:  MOVWF  1E
153B:  BCF    0A.4
153C:  BCF    03.6
153D:  CALL   11D
153E:  BSF    0A.4
153F:  BTFSC  2B.7
1540:  BSF    0B.7
1541:  MOVF   7A,W
1542:  BSF    03.5
1543:  MOVWF  2B
1544:  MOVF   79,W
1545:  MOVWF  2A
1546:  MOVF   78,W
1547:  MOVWF  29
1548:  MOVF   77,W
1549:  MOVWF  28
154A:  GOTO   5DF
154B:  BCF    03.5
....................    else 
....................       temp = (float) pulse*60/200; 
154C:  BSF    03.5
154D:  MOVF   27,W
154E:  BCF    03.5
154F:  BSF    03.6
1550:  MOVWF  17
1551:  BSF    03.5
1552:  BCF    03.6
1553:  MOVF   26,W
1554:  BCF    03.5
1555:  BSF    03.6
1556:  MOVWF  16
*
1573:  MOVF   7A,W
1574:  BSF    03.5
1575:  BCF    03.6
1576:  MOVWF  2F
1577:  MOVF   79,W
1578:  MOVWF  2E
1579:  MOVF   78,W
157A:  MOVWF  2D
157B:  MOVF   77,W
157C:  MOVWF  2C
157D:  BCF    03.5
157E:  CLRF   2B
157F:  BTFSC  0B.7
1580:  BSF    2B.7
1581:  BCF    0B.7
1582:  BSF    03.5
1583:  MOVF   2F,W
1584:  BCF    03.5
1585:  BSF    03.6
1586:  MOVWF  1D
1587:  BSF    03.5
1588:  BCF    03.6
1589:  MOVF   2E,W
158A:  BCF    03.5
158B:  BSF    03.6
158C:  MOVWF  1C
158D:  BSF    03.5
158E:  BCF    03.6
158F:  MOVF   2D,W
1590:  BCF    03.5
1591:  BSF    03.6
1592:  MOVWF  1B
1593:  BSF    03.5
1594:  BCF    03.6
1595:  MOVF   2C,W
1596:  BCF    03.5
1597:  BSF    03.6
1598:  MOVWF  1A
1599:  CLRF   21
159A:  CLRF   20
159B:  MOVLW  70
159C:  MOVWF  1F
159D:  MOVLW  84
159E:  MOVWF  1E
159F:  BCF    0A.4
15A0:  BCF    03.6
15A1:  CALL   0A6
15A2:  BSF    0A.4
15A3:  BTFSC  2B.7
15A4:  BSF    0B.7
15A5:  MOVF   7A,W
15A6:  BSF    03.5
15A7:  MOVWF  2F
15A8:  MOVF   79,W
15A9:  MOVWF  2E
15AA:  MOVF   78,W
15AB:  MOVWF  2D
15AC:  MOVF   77,W
15AD:  MOVWF  2C
15AE:  BCF    03.5
15AF:  CLRF   2B
15B0:  BTFSC  0B.7
15B1:  BSF    2B.7
15B2:  BCF    0B.7
15B3:  BSF    03.5
15B4:  MOVF   2F,W
15B5:  BCF    03.5
15B6:  BSF    03.6
15B7:  MOVWF  1D
15B8:  BSF    03.5
15B9:  BCF    03.6
15BA:  MOVF   2E,W
15BB:  BCF    03.5
15BC:  BSF    03.6
15BD:  MOVWF  1C
15BE:  BSF    03.5
15BF:  BCF    03.6
15C0:  MOVF   2D,W
15C1:  BCF    03.5
15C2:  BSF    03.6
15C3:  MOVWF  1B
15C4:  BSF    03.5
15C5:  BCF    03.6
15C6:  MOVF   2C,W
15C7:  BCF    03.5
15C8:  BSF    03.6
15C9:  MOVWF  1A
15CA:  CLRF   21
15CB:  CLRF   20
15CC:  MOVLW  48
15CD:  MOVWF  1F
15CE:  MOVLW  86
15CF:  MOVWF  1E
15D0:  BCF    0A.4
15D1:  BCF    03.6
15D2:  CALL   11D
15D3:  BSF    0A.4
15D4:  BTFSC  2B.7
15D5:  BSF    0B.7
15D6:  MOVF   7A,W
15D7:  BSF    03.5
15D8:  MOVWF  2B
15D9:  MOVF   79,W
15DA:  MOVWF  2A
15DB:  MOVF   78,W
15DC:  MOVWF  29
15DD:  MOVF   77,W
15DE:  MOVWF  28
....................    lcd_gotoxy(1, 4); 
15DF:  MOVLW  01
15E0:  MOVWF  3A
15E1:  MOVLW  04
15E2:  MOVWF  3B
15E3:  BCF    0A.4
15E4:  BCF    03.5
15E5:  CALL   669
15E6:  BSF    0A.4
....................    printf(lcd_putc, "SPEED: %03.0f RPM", temp); 
15E7:  MOVLW  73
15E8:  BSF    03.6
15E9:  MOVWF  0D
15EA:  MOVLW  00
15EB:  MOVWF  0F
15EC:  BCF    03.0
15ED:  MOVLW  07
15EE:  BSF    03.5
15EF:  BCF    03.6
15F0:  MOVWF  2C
*
166B:  MOVLW  42
166C:  MOVWF  04
166D:  MOVF   2B,W
166E:  MOVWF  2F
166F:  MOVF   2A,W
1670:  MOVWF  2E
1671:  MOVF   29,W
1672:  MOVWF  2D
1673:  MOVF   28,W
1674:  MOVWF  2C
1675:  CLRF   30
1676:  BCF    0A.4
1677:  BSF    0A.3
1678:  BCF    03.5
1679:  CALL   419
167A:  BSF    0A.4
167B:  BCF    0A.3
167C:  MOVLW  79
167D:  BSF    03.6
167E:  MOVWF  0D
167F:  MOVLW  00
1680:  MOVWF  0F
1681:  BSF    03.0
1682:  MOVLW  04
1683:  BSF    03.5
1684:  BCF    03.6
1685:  MOVWF  2C
*
1700:  BCF    03.5
1701:  BSF    0A.3
1702:  BCF    0A.4
1703:  GOTO   62D (RETURN)
.................... } 
.................... void display_current_setting (int setPosition) { 
....................    lcd_gotoxy(1, 2); 
*
0775:  MOVLW  01
0776:  BSF    03.5
0777:  MOVWF  3A
0778:  MOVLW  02
0779:  MOVWF  3B
077A:  BCF    03.5
077B:  CALL   669
....................    switch(setPosion) { 
077C:  BSF    03.5
077D:  MOVF   24,W
077E:  ADDLW  FA
077F:  BTFSC  03.0
0780:  GOTO   7BB
0781:  ADDLW  06
0782:  BCF    03.5
0783:  GOTO   7BF
....................       case NONSET: 
....................          printf(lcd_putc, "            "); 
0784:  MOVLW  7C
0785:  BSF    03.6
0786:  MOVWF  0D
0787:  MOVLW  00
0788:  MOVWF  0F
0789:  BCF    03.6
078A:  CALL   6D4
....................       break; 
078B:  BSF    03.5
078C:  GOTO   7BB
....................       case SET_HUNDREDS: 
....................          printf(lcd_putc, "SET_HUNDREDS"); 
078D:  MOVLW  83
078E:  BSF    03.6
078F:  MOVWF  0D
0790:  MOVLW  00
0791:  MOVWF  0F
0792:  BCF    03.6
0793:  CALL   6D4
....................       break; 
0794:  BSF    03.5
0795:  GOTO   7BB
....................       case SET_DOZENS: 
....................          printf(lcd_putc, "SET_DOZENS  "); 
0796:  MOVLW  8A
0797:  BSF    03.6
0798:  MOVWF  0D
0799:  MOVLW  00
079A:  MOVWF  0F
079B:  BCF    03.6
079C:  CALL   6D4
....................       break; 
079D:  BSF    03.5
079E:  GOTO   7BB
....................       case SET_UNITS: 
....................          printf(lcd_putc, "SET_UNITS   "); 
079F:  MOVLW  91
07A0:  BSF    03.6
07A1:  MOVWF  0D
07A2:  MOVLW  00
07A3:  MOVWF  0F
07A4:  BCF    03.6
07A5:  CALL   6D4
....................       break; 
07A6:  BSF    03.5
07A7:  GOTO   7BB
....................       case RUN: 
....................          printf(lcd_putc, "RUN         "); 
07A8:  MOVLW  98
07A9:  BSF    03.6
07AA:  MOVWF  0D
07AB:  MOVLW  00
07AC:  MOVWF  0F
07AD:  BCF    03.6
07AE:  CALL   6D4
....................       break; 
07AF:  BSF    03.5
07B0:  GOTO   7BB
....................       case STOP: 
....................          printf(lcd_putc, "STOP        "); 
07B1:  MOVLW  9F
07B2:  BSF    03.6
07B3:  MOVWF  0D
07B4:  MOVLW  00
07B5:  MOVWF  0F
07B6:  BCF    03.6
07B7:  CALL   6D4
....................       break; 
07B8:  BSF    03.5
07B9:  GOTO   7BB
07BA:  BSF    03.5
....................    } 
07BB:  BCF    03.5
07BC:  BSF    0A.3
07BD:  BCF    0A.4
07BE:  GOTO   616 (RETURN)
.................... } 
.................... float PIDOutput(float SP, float CP) 
.................... { 
....................    errorC = SP-CP; 
*
09A2:  BSF    03.1
09A3:  MOVF   63,W
09A4:  BCF    03.5
09A5:  BSF    03.6
09A6:  MOVWF  19
09A7:  BSF    03.5
09A8:  BCF    03.6
09A9:  MOVF   62,W
09AA:  BCF    03.5
09AB:  BSF    03.6
09AC:  MOVWF  18
09AD:  BSF    03.5
09AE:  BCF    03.6
09AF:  MOVF   61,W
09B0:  BCF    03.5
09B1:  BSF    03.6
09B2:  MOVWF  17
09B3:  BSF    03.5
09B4:  BCF    03.6
09B5:  MOVF   60,W
09B6:  BCF    03.5
09B7:  BSF    03.6
09B8:  MOVWF  16
09B9:  BSF    03.5
09BA:  BCF    03.6
09BB:  MOVF   67,W
09BC:  BCF    03.5
09BD:  BSF    03.6
09BE:  MOVWF  1D
09BF:  BSF    03.5
09C0:  BCF    03.6
09C1:  MOVF   66,W
09C2:  BCF    03.5
09C3:  BSF    03.6
09C4:  MOVWF  1C
09C5:  BSF    03.5
09C6:  BCF    03.6
09C7:  MOVF   65,W
09C8:  BCF    03.5
09C9:  BSF    03.6
09CA:  MOVWF  1B
09CB:  BSF    03.5
09CC:  BCF    03.6
09CD:  MOVF   64,W
09CE:  BCF    03.5
09CF:  BSF    03.6
09D0:  MOVWF  1A
09D1:  BCF    0A.3
09D2:  BCF    03.6
09D3:  CALL   1E9
09D4:  BSF    0A.3
09D5:  MOVF   7A,W
09D6:  MOVWF  44
09D7:  MOVF   79,W
09D8:  MOVWF  43
09D9:  MOVF   78,W
09DA:  MOVWF  42
09DB:  MOVF   77,W
09DC:  MOVWF  41
....................    P= KP*errorC; 
09DD:  MOVF   60,W
09DE:  BSF    03.6
09DF:  MOVWF  1D
09E0:  BCF    03.6
09E1:  MOVF   5F,W
09E2:  BSF    03.6
09E3:  MOVWF  1C
09E4:  BCF    03.6
09E5:  MOVF   5E,W
09E6:  BSF    03.6
09E7:  MOVWF  1B
09E8:  BCF    03.6
09E9:  MOVF   5D,W
09EA:  BSF    03.6
09EB:  MOVWF  1A
09EC:  BCF    03.6
09ED:  MOVF   44,W
09EE:  BSF    03.6
09EF:  MOVWF  21
09F0:  BCF    03.6
09F1:  MOVF   43,W
09F2:  BSF    03.6
09F3:  MOVWF  20
09F4:  BCF    03.6
09F5:  MOVF   42,W
09F6:  BSF    03.6
09F7:  MOVWF  1F
09F8:  BCF    03.6
09F9:  MOVF   41,W
09FA:  BSF    03.6
09FB:  MOVWF  1E
09FC:  BCF    0A.3
09FD:  BCF    03.6
09FE:  CALL   0A6
09FF:  BSF    0A.3
0A00:  MOVF   7A,W
0A01:  MOVWF  4C
0A02:  MOVF   79,W
0A03:  MOVWF  4B
0A04:  MOVF   78,W
0A05:  MOVWF  4A
0A06:  MOVF   77,W
0A07:  MOVWF  49
....................    I = I + KI*(errorC+errorP)/2*dt; 
0A08:  BCF    03.1
0A09:  MOVF   44,W
0A0A:  BSF    03.6
0A0B:  MOVWF  19
0A0C:  BCF    03.6
0A0D:  MOVF   43,W
0A0E:  BSF    03.6
0A0F:  MOVWF  18
0A10:  BCF    03.6
0A11:  MOVF   42,W
0A12:  BSF    03.6
0A13:  MOVWF  17
0A14:  BCF    03.6
0A15:  MOVF   41,W
0A16:  BSF    03.6
0A17:  MOVWF  16
0A18:  BCF    03.6
0A19:  MOVF   48,W
0A1A:  BSF    03.6
0A1B:  MOVWF  1D
0A1C:  BCF    03.6
0A1D:  MOVF   47,W
0A1E:  BSF    03.6
0A1F:  MOVWF  1C
0A20:  BCF    03.6
0A21:  MOVF   46,W
0A22:  BSF    03.6
0A23:  MOVWF  1B
0A24:  BCF    03.6
0A25:  MOVF   45,W
0A26:  BSF    03.6
0A27:  MOVWF  1A
0A28:  BCF    0A.3
0A29:  BCF    03.6
0A2A:  CALL   1E9
0A2B:  BSF    0A.3
0A2C:  MOVF   64,W
0A2D:  BSF    03.6
0A2E:  MOVWF  1D
0A2F:  BCF    03.6
0A30:  MOVF   63,W
0A31:  BSF    03.6
0A32:  MOVWF  1C
0A33:  BCF    03.6
0A34:  MOVF   62,W
0A35:  BSF    03.6
0A36:  MOVWF  1B
0A37:  BCF    03.6
0A38:  MOVF   61,W
0A39:  BSF    03.6
0A3A:  MOVWF  1A
0A3B:  MOVF   7A,W
0A3C:  MOVWF  21
0A3D:  MOVF   79,W
0A3E:  MOVWF  20
0A3F:  MOVF   78,W
0A40:  MOVWF  1F
0A41:  MOVF   77,W
0A42:  MOVWF  1E
0A43:  BCF    0A.3
0A44:  BCF    03.6
0A45:  CALL   0A6
0A46:  BSF    0A.3
0A47:  MOVF   7A,W
0A48:  BSF    03.5
0A49:  MOVWF  6B
0A4A:  MOVF   79,W
0A4B:  MOVWF  6A
0A4C:  MOVF   78,W
0A4D:  MOVWF  69
0A4E:  MOVF   77,W
0A4F:  MOVWF  68
0A50:  MOVF   6B,W
0A51:  BCF    03.5
0A52:  BSF    03.6
0A53:  MOVWF  1D
0A54:  BSF    03.5
0A55:  BCF    03.6
0A56:  MOVF   6A,W
0A57:  BCF    03.5
0A58:  BSF    03.6
0A59:  MOVWF  1C
0A5A:  BSF    03.5
0A5B:  BCF    03.6
0A5C:  MOVF   69,W
0A5D:  BCF    03.5
0A5E:  BSF    03.6
0A5F:  MOVWF  1B
0A60:  BSF    03.5
0A61:  BCF    03.6
0A62:  MOVF   68,W
0A63:  BCF    03.5
0A64:  BSF    03.6
0A65:  MOVWF  1A
0A66:  CLRF   21
0A67:  CLRF   20
0A68:  CLRF   1F
0A69:  MOVLW  80
0A6A:  MOVWF  1E
0A6B:  BCF    0A.3
0A6C:  BCF    03.6
0A6D:  CALL   11D
0A6E:  BSF    0A.3
0A6F:  MOVF   7A,W
0A70:  BSF    03.5
0A71:  MOVWF  6B
0A72:  MOVF   79,W
0A73:  MOVWF  6A
0A74:  MOVF   78,W
0A75:  MOVWF  69
0A76:  MOVF   77,W
0A77:  MOVWF  68
0A78:  MOVF   6B,W
0A79:  BCF    03.5
0A7A:  BSF    03.6
0A7B:  MOVWF  1D
0A7C:  BSF    03.5
0A7D:  BCF    03.6
0A7E:  MOVF   6A,W
0A7F:  BCF    03.5
0A80:  BSF    03.6
0A81:  MOVWF  1C
0A82:  BSF    03.5
0A83:  BCF    03.6
0A84:  MOVF   69,W
0A85:  BCF    03.5
0A86:  BSF    03.6
0A87:  MOVWF  1B
0A88:  BSF    03.5
0A89:  BCF    03.6
0A8A:  MOVF   68,W
0A8B:  BCF    03.5
0A8C:  BSF    03.6
0A8D:  MOVWF  1A
0A8E:  MOVLW  0A
0A8F:  MOVWF  21
0A90:  MOVLW  D7
0A91:  MOVWF  20
0A92:  MOVLW  23
0A93:  MOVWF  1F
0A94:  MOVLW  78
0A95:  MOVWF  1E
0A96:  BCF    0A.3
0A97:  BCF    03.6
0A98:  CALL   0A6
0A99:  BSF    0A.3
0A9A:  BCF    03.1
0A9B:  MOVF   50,W
0A9C:  BSF    03.6
0A9D:  MOVWF  19
0A9E:  BCF    03.6
0A9F:  MOVF   4F,W
0AA0:  BSF    03.6
0AA1:  MOVWF  18
0AA2:  BCF    03.6
0AA3:  MOVF   4E,W
0AA4:  BSF    03.6
0AA5:  MOVWF  17
0AA6:  BCF    03.6
0AA7:  MOVF   4D,W
0AA8:  BSF    03.6
0AA9:  MOVWF  16
0AAA:  MOVF   7A,W
0AAB:  MOVWF  1D
0AAC:  MOVF   79,W
0AAD:  MOVWF  1C
0AAE:  MOVF   78,W
0AAF:  MOVWF  1B
0AB0:  MOVF   77,W
0AB1:  MOVWF  1A
0AB2:  BCF    0A.3
0AB3:  BCF    03.6
0AB4:  CALL   1E9
0AB5:  BSF    0A.3
0AB6:  MOVF   7A,W
0AB7:  MOVWF  50
0AB8:  MOVF   79,W
0AB9:  MOVWF  4F
0ABA:  MOVF   78,W
0ABB:  MOVWF  4E
0ABC:  MOVF   77,W
0ABD:  MOVWF  4D
....................    D = KD*(errorC-errorP)/dt; 
0ABE:  BSF    03.1
0ABF:  MOVF   44,W
0AC0:  BSF    03.6
0AC1:  MOVWF  19
0AC2:  BCF    03.6
0AC3:  MOVF   43,W
0AC4:  BSF    03.6
0AC5:  MOVWF  18
0AC6:  BCF    03.6
0AC7:  MOVF   42,W
0AC8:  BSF    03.6
0AC9:  MOVWF  17
0ACA:  BCF    03.6
0ACB:  MOVF   41,W
0ACC:  BSF    03.6
0ACD:  MOVWF  16
0ACE:  BCF    03.6
0ACF:  MOVF   48,W
0AD0:  BSF    03.6
0AD1:  MOVWF  1D
0AD2:  BCF    03.6
0AD3:  MOVF   47,W
0AD4:  BSF    03.6
0AD5:  MOVWF  1C
0AD6:  BCF    03.6
0AD7:  MOVF   46,W
0AD8:  BSF    03.6
0AD9:  MOVWF  1B
0ADA:  BCF    03.6
0ADB:  MOVF   45,W
0ADC:  BSF    03.6
0ADD:  MOVWF  1A
0ADE:  BCF    0A.3
0ADF:  BCF    03.6
0AE0:  CALL   1E9
0AE1:  BSF    0A.3
0AE2:  MOVF   68,W
0AE3:  BSF    03.6
0AE4:  MOVWF  1D
0AE5:  BCF    03.6
0AE6:  MOVF   67,W
0AE7:  BSF    03.6
0AE8:  MOVWF  1C
0AE9:  BCF    03.6
0AEA:  MOVF   66,W
0AEB:  BSF    03.6
0AEC:  MOVWF  1B
0AED:  BCF    03.6
0AEE:  MOVF   65,W
0AEF:  BSF    03.6
0AF0:  MOVWF  1A
0AF1:  MOVF   7A,W
0AF2:  MOVWF  21
0AF3:  MOVF   79,W
0AF4:  MOVWF  20
0AF5:  MOVF   78,W
0AF6:  MOVWF  1F
0AF7:  MOVF   77,W
0AF8:  MOVWF  1E
0AF9:  BCF    0A.3
0AFA:  BCF    03.6
0AFB:  CALL   0A6
0AFC:  BSF    0A.3
0AFD:  MOVF   7A,W
0AFE:  BSF    03.5
0AFF:  MOVWF  6B
0B00:  MOVF   79,W
0B01:  MOVWF  6A
0B02:  MOVF   78,W
0B03:  MOVWF  69
0B04:  MOVF   77,W
0B05:  MOVWF  68
0B06:  MOVF   6B,W
0B07:  BCF    03.5
0B08:  BSF    03.6
0B09:  MOVWF  1D
0B0A:  BSF    03.5
0B0B:  BCF    03.6
0B0C:  MOVF   6A,W
0B0D:  BCF    03.5
0B0E:  BSF    03.6
0B0F:  MOVWF  1C
0B10:  BSF    03.5
0B11:  BCF    03.6
0B12:  MOVF   69,W
0B13:  BCF    03.5
0B14:  BSF    03.6
0B15:  MOVWF  1B
0B16:  BSF    03.5
0B17:  BCF    03.6
0B18:  MOVF   68,W
0B19:  BCF    03.5
0B1A:  BSF    03.6
0B1B:  MOVWF  1A
0B1C:  MOVLW  0A
0B1D:  MOVWF  21
0B1E:  MOVLW  D7
0B1F:  MOVWF  20
0B20:  MOVLW  23
0B21:  MOVWF  1F
0B22:  MOVLW  78
0B23:  MOVWF  1E
0B24:  BCF    0A.3
0B25:  BCF    03.6
0B26:  CALL   11D
0B27:  BSF    0A.3
0B28:  MOVF   7A,W
0B29:  MOVWF  54
0B2A:  MOVF   79,W
0B2B:  MOVWF  53
0B2C:  MOVF   78,W
0B2D:  MOVWF  52
0B2E:  MOVF   77,W
0B2F:  MOVWF  51
....................    PID = P+I+D; 
0B30:  BCF    03.1
0B31:  MOVF   4C,W
0B32:  BSF    03.6
0B33:  MOVWF  19
0B34:  BCF    03.6
0B35:  MOVF   4B,W
0B36:  BSF    03.6
0B37:  MOVWF  18
0B38:  BCF    03.6
0B39:  MOVF   4A,W
0B3A:  BSF    03.6
0B3B:  MOVWF  17
0B3C:  BCF    03.6
0B3D:  MOVF   49,W
0B3E:  BSF    03.6
0B3F:  MOVWF  16
0B40:  BCF    03.6
0B41:  MOVF   50,W
0B42:  BSF    03.6
0B43:  MOVWF  1D
0B44:  BCF    03.6
0B45:  MOVF   4F,W
0B46:  BSF    03.6
0B47:  MOVWF  1C
0B48:  BCF    03.6
0B49:  MOVF   4E,W
0B4A:  BSF    03.6
0B4B:  MOVWF  1B
0B4C:  BCF    03.6
0B4D:  MOVF   4D,W
0B4E:  BSF    03.6
0B4F:  MOVWF  1A
0B50:  BCF    0A.3
0B51:  BCF    03.6
0B52:  CALL   1E9
0B53:  BSF    0A.3
0B54:  MOVF   7A,W
0B55:  BSF    03.5
0B56:  MOVWF  6B
0B57:  MOVF   79,W
0B58:  MOVWF  6A
0B59:  MOVF   78,W
0B5A:  MOVWF  69
0B5B:  MOVF   77,W
0B5C:  MOVWF  68
0B5D:  BCF    03.1
0B5E:  MOVF   6B,W
0B5F:  BCF    03.5
0B60:  BSF    03.6
0B61:  MOVWF  19
0B62:  BSF    03.5
0B63:  BCF    03.6
0B64:  MOVF   6A,W
0B65:  BCF    03.5
0B66:  BSF    03.6
0B67:  MOVWF  18
0B68:  BSF    03.5
0B69:  BCF    03.6
0B6A:  MOVF   69,W
0B6B:  BCF    03.5
0B6C:  BSF    03.6
0B6D:  MOVWF  17
0B6E:  BSF    03.5
0B6F:  BCF    03.6
0B70:  MOVF   68,W
0B71:  BCF    03.5
0B72:  BSF    03.6
0B73:  MOVWF  16
0B74:  BCF    03.6
0B75:  MOVF   54,W
0B76:  BSF    03.6
0B77:  MOVWF  1D
0B78:  BCF    03.6
0B79:  MOVF   53,W
0B7A:  BSF    03.6
0B7B:  MOVWF  1C
0B7C:  BCF    03.6
0B7D:  MOVF   52,W
0B7E:  BSF    03.6
0B7F:  MOVWF  1B
0B80:  BCF    03.6
0B81:  MOVF   51,W
0B82:  BSF    03.6
0B83:  MOVWF  1A
0B84:  BCF    0A.3
0B85:  BCF    03.6
0B86:  CALL   1E9
0B87:  BSF    0A.3
0B88:  MOVF   7A,W
0B89:  MOVWF  58
0B8A:  MOVF   79,W
0B8B:  MOVWF  57
0B8C:  MOVF   78,W
0B8D:  MOVWF  56
0B8E:  MOVF   77,W
0B8F:  MOVWF  55
....................    if(PID>250) 
0B90:  BSF    03.5
0B91:  CLRF   6D
0B92:  CLRF   6C
0B93:  MOVLW  7A
0B94:  MOVWF  6B
0B95:  MOVLW  86
0B96:  MOVWF  6A
0B97:  BCF    03.5
0B98:  MOVF   58,W
0B99:  BSF    03.6
0B9A:  MOVWF  13
0B9B:  BCF    03.6
0B9C:  MOVF   57,W
0B9D:  BSF    03.6
0B9E:  MOVWF  12
0B9F:  BCF    03.6
0BA0:  MOVF   56,W
0BA1:  BSF    03.6
0BA2:  MOVWF  11
0BA3:  BCF    03.6
0BA4:  MOVF   55,W
0BA5:  BSF    03.6
0BA6:  MOVWF  10
0BA7:  BCF    0A.3
0BA8:  BCF    03.6
0BA9:  CALL   32F
0BAA:  BSF    0A.3
0BAB:  BTFSS  03.0
0BAC:  GOTO   3B3
....................    { 
....................       PID=250; 
0BAD:  CLRF   58
0BAE:  CLRF   57
0BAF:  MOVLW  7A
0BB0:  MOVWF  56
0BB1:  MOVLW  86
0BB2:  MOVWF  55
....................    } 
....................    if(PID < -250) 
0BB3:  MOVF   58,W
0BB4:  BSF    03.5
0BB5:  MOVWF  6D
0BB6:  BCF    03.5
0BB7:  MOVF   57,W
0BB8:  BSF    03.5
0BB9:  MOVWF  6C
0BBA:  BCF    03.5
0BBB:  MOVF   56,W
0BBC:  BSF    03.5
0BBD:  MOVWF  6B
0BBE:  BCF    03.5
0BBF:  MOVF   55,W
0BC0:  BSF    03.5
0BC1:  MOVWF  6A
0BC2:  BCF    03.5
0BC3:  BSF    03.6
0BC4:  CLRF   13
0BC5:  CLRF   12
0BC6:  MOVLW  FA
0BC7:  MOVWF  11
0BC8:  MOVLW  86
0BC9:  MOVWF  10
0BCA:  BCF    0A.3
0BCB:  BCF    03.6
0BCC:  CALL   32F
0BCD:  BSF    0A.3
0BCE:  BTFSS  03.0
0BCF:  GOTO   3D6
....................    { 
....................       PID=-250; 
0BD0:  CLRF   58
0BD1:  CLRF   57
0BD2:  MOVLW  FA
0BD3:  MOVWF  56
0BD4:  MOVLW  86
0BD5:  MOVWF  55
....................    } 
....................    errorP = errorC; 
0BD6:  MOVF   44,W
0BD7:  MOVWF  48
0BD8:  MOVF   43,W
0BD9:  MOVWF  47
0BDA:  MOVF   42,W
0BDB:  MOVWF  46
0BDC:  MOVF   41,W
0BDD:  MOVWF  45
....................    return PID; 
0BDE:  MOVF   55,W
0BDF:  MOVWF  77
0BE0:  MOVF   56,W
0BE1:  MOVWF  78
0BE2:  MOVF   57,W
0BE3:  MOVWF  79
0BE4:  MOVF   58,W
0BE5:  MOVWF  7A
.................... } 
....................  
.................... /******************************* Init Function ********************************/ 
.................... void timer1_init (void) { 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
*
065A:  MOVLW  85
065B:  MOVWF  10
....................    set_timer1(15536); 
065C:  CLRF   0E
065D:  MOVLW  3C
065E:  MOVWF  0F
065F:  MOVLW  B0
0660:  MOVWF  0E
....................    enable_interrupts(INT_TIMER1); 
0661:  BSF    03.5
0662:  BSF    0C.0
....................    enable_interrupts(GlOBAL); 
0663:  MOVLW  C0
0664:  BCF    03.5
0665:  IORWF  0B,F
0666:  BSF    0A.3
0667:  BCF    0A.4
0668:  GOTO   5F5 (RETURN)
.................... } 
....................  
.................... void timer0_init(void) { 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16|RTCC_8_bit);      //1.0 ms overflow 
*
064B:  BSF    03.5
064C:  MOVF   01,W
064D:  ANDLW  C0
064E:  IORLW  03
064F:  MOVWF  01
....................    enable_interrupts(INT_EXT); 
0650:  BCF    03.5
0651:  BSF    0B.4
....................    enable_interrupts(INT_TIMER0); 
0652:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
0653:  MOVLW  C0
0654:  IORWF  0B,F
....................    set_timer0(6); 
0655:  MOVLW  06
0656:  MOVWF  01
0657:  BSF    0A.3
0658:  BCF    0A.4
0659:  GOTO   5F2 (RETURN)
.................... } 
.................... /**************************** Interrupt Function ******************************/ 
.................... #INT_TIMER1 
.................... void TIMER1_isr(void) 
.................... { 
....................    xCP = integrate_speed(xCP, f); 
*
0800:  BSF    03.5
0801:  MOVF   23,W
0802:  MOVWF  63
0803:  MOVF   22,W
0804:  MOVWF  62
0805:  MOVF   21,W
0806:  MOVWF  61
0807:  MOVF   20,W
0808:  MOVWF  60
0809:  MOVF   74,W
080A:  MOVWF  65
080B:  MOVF   73,W
080C:  MOVWF  64
*
097F:  MOVF   7A,W
0980:  MOVWF  23
0981:  MOVF   79,W
0982:  MOVWF  22
0983:  MOVF   78,W
0984:  MOVWF  21
0985:  MOVF   77,W
0986:  MOVWF  20
....................    output_toggle(PIN_C6); 
0987:  BCF    25.6
0988:  MOVF   25,W
0989:  MOVWF  07
098A:  MOVLW  40
098B:  BCF    03.5
098C:  XORWF  07,F
....................    if (setPosion == RUN) { 
098D:  BSF    03.5
098E:  MOVF   24,W
098F:  SUBLW  04
0990:  BTFSS  03.2
0991:  GOTO   403
....................       PID = PIDOutput(xSP, xCP); 
0992:  MOVF   7E,W
0993:  MOVWF  63
0994:  MOVF   7D,W
0995:  MOVWF  62
0996:  MOVF   7C,W
0997:  MOVWF  61
0998:  MOVF   7B,W
0999:  MOVWF  60
099A:  MOVF   23,W
099B:  MOVWF  67
099C:  MOVF   22,W
099D:  MOVWF  66
099E:  MOVF   21,W
099F:  MOVWF  65
09A0:  MOVF   20,W
09A1:  MOVWF  64
*
0BE6:  MOVF   7A,W
0BE7:  MOVWF  58
0BE8:  MOVF   79,W
0BE9:  MOVWF  57
0BEA:  MOVF   78,W
0BEB:  MOVWF  56
0BEC:  MOVF   77,W
0BED:  MOVWF  55
....................       set_speed(PID); 
0BEE:  MOVF   58,W
0BEF:  BSF    03.5
0BF0:  MOVWF  63
0BF1:  BCF    03.5
0BF2:  MOVF   57,W
0BF3:  BSF    03.5
0BF4:  MOVWF  62
0BF5:  BCF    03.5
0BF6:  MOVF   56,W
0BF7:  BSF    03.5
0BF8:  MOVWF  61
0BF9:  BCF    03.5
0BFA:  MOVF   55,W
0BFB:  BSF    03.5
0BFC:  MOVWF  60
0BFD:  BCF    0A.3
0BFE:  BCF    03.5
0BFF:  CALL   3AF
0C00:  BSF    0A.3
....................    } else { 
0C01:  GOTO   415
0C02:  BSF    03.5
....................       PID = 0; 
0C03:  BCF    03.5
0C04:  CLRF   58
0C05:  CLRF   57
0C06:  CLRF   56
0C07:  CLRF   55
....................       errorP = 0; 
0C08:  CLRF   48
0C09:  CLRF   47
0C0A:  CLRF   46
0C0B:  CLRF   45
....................       set_speed(0); 
0C0C:  BSF    03.5
0C0D:  CLRF   63
0C0E:  CLRF   62
0C0F:  CLRF   61
0C10:  CLRF   60
0C11:  BCF    0A.3
0C12:  BCF    03.5
0C13:  CALL   3AF
0C14:  BSF    0A.3
....................    } 
.................... } 
....................  
0C15:  BCF    0C.0
0C16:  BCF    0A.3
0C17:  BCF    0A.4
0C18:  GOTO   035
.................... #INT_EXT 
.................... void EXT_isr(void) // pulse count 
.................... { 
....................    pulse++; 
*
043A:  INCF   71,F
043B:  BTFSC  03.2
043C:  INCF   72,F
.................... } 
....................  
043D:  BCF    0B.1
043E:  BCF    0A.3
043F:  BCF    0A.4
0440:  GOTO   035
.................... #INT_TIMER0 
.................... void  TIMER0_isr(void) //1.0ms over 
.................... { 
....................    count++; 
0441:  INCF   75,F
0442:  BTFSC  03.2
0443:  INCF   76,F
....................    if(count>1250) 
0444:  MOVF   76,W
0445:  SUBLW  03
0446:  BTFSC  03.0
0447:  GOTO   457
0448:  XORLW  FF
0449:  BTFSS  03.2
044A:  GOTO   44F
044B:  MOVF   75,W
044C:  SUBLW  E2
044D:  BTFSC  03.0
044E:  GOTO   457
....................    { 
....................       count=0; 
044F:  CLRF   76
0450:  CLRF   75
....................       f=pulse; 
0451:  MOVF   72,W
0452:  MOVWF  74
0453:  MOVF   71,W
0454:  MOVWF  73
....................       pulse=0;// pulse remove 
0455:  CLRF   72
0456:  CLRF   71
....................    } 
0457:  BCF    0B.2
0458:  BCF    0A.3
0459:  BCF    0A.4
045A:  GOTO   035
.................... } 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
