/********************************* Include ************************************/
#include <main.h>
#include <lcd.h>

/********************************* Define *************************************/
#fuses NOWDT, NOPROTECT, HS, NOLVP
#use delay(clock=20M)
#define NUT_1 PIN_B4
#define NUT_2 PIN_B5
#define NUT_3 PIN_B6
#define IC_DATA PIN_D0
#define IC_CLK PIN_D1
#define IC_LATCH PIN_D2
#define Out_dir PIN_C5
#define In_dir PIN_B1
#define dt 0.0131072

/**************************** Variable Define *********************************/
enum set_postion {
   NONSET = 0,
   SET_HUNDREDS,
   SET_DOZENS,
   SET_UNITS,

};

/****************************** Global Variable *******************************/
unsigned int16 flag=0;
float x1=0;
float x2=0;
float x3=0;
float vi_tri;
int temp,temp1,temp2;
float errorC, errorP,P,I,D,PID,I0;
float KP;
float KI;
float KD;
float IO=0;
float SP,CP;
long pulse, f;
long count;
float xSP;                            //Global position for setpoint
set_postion setPosion;                //Set position

/*************************** Function Declaration *****************************/
//Internal Function
float round(float A);
void CLK(void);
void LATCH(void);
void Export_LED(unsigned int16 P);
void LED(float D);
void set_dir(int1 dir);
void set_duty(int8 duty);
float Position(float x, long f);
float ReadButton();
float PIDOutput(float SP, float CP);
void display_position (float position);
void display_current_setting (setPosion setPosition);

//Init function
void timer1_init (void);
void timer0_init(void);

//Interrupt function
void EXT_isr(void);
void TIMER0_isr(void);
void TIMER1_isr(void);

/****************************** Main Function *********************************/
void main()
{
   //Initialize function
   lcd_init();
   timer0_init();
   timer1_init();

   while(TRUE) {
   //TODO: User Code
      xSP = ReadButton();
      display_position(xSP);
      display_current_setting(setPosion);
      delay_ms(50);
   }
}

/*************************** Function Definition ******************************/
float round(float A)
{
   A = A*10;
   if(A>=0){
      if((int)A%10 >= 5) {
         A+=10;
      }
   } else {
      if((int)-A%10 >= 5) {
         A-=10;
      }
   }
   A = A/10;
   return A;
}

void CLK(void) // shift clock
{
   output_low(IC_CLK);
   delay_us(500);
   output_high(IC_CLK);
   delay_us(500);
}

void LATCH(void) // latch clock
{
   output_high(IC_LATCH);
   delay_us(500);
   output_low(IC_LATCH);
   delay_us(500);
}

void Export_LED(unsigned int16 P) // export led
{
   #bit DB = P.15
   for(unsigned int i=0; i<16; i++)
   {
      output_bit(IC_DATA, DB);
      CLK();
      P=P<<1;
   }
   LATCH();
}

void LED(float D) // Led
{
   unsigned int16 array[11] = { 0x07E0, 0x03E0, 0x01E0, 0x00E0, 0x0060, 0x0020,
                                0x0030, 0x0038, 0x003C, 0x003E, 0x003F};
   float i;
   i = round(D/100 + 5);
   Export_LED(array[(int)i]);
}

void set_dir(int1 dir) // dir = 0 : CW , dir = 1 : CCW
{
   switch(dir)
   {
      case 1:
      output_high(Out_dir);
      break;
      case 0:
      output_low(Out_dir);
      break;
   }
}

void set_duty(int8 duty) // duty ~ 8bit, 0 - 255
{
   setup_timer_2(T2_DIV_BY_16, 255, 1);
   setup_ccp1(CCP_PWM);
   set_pwm1_duty(duty);
}

float Position(float x, long f) // feedback CP
{
   x = x + f*dt/200;
   return x;
}

float ReadButton() {
   if(input(NUT_3)==1) {
      if(temp==0) {
         flag=flag+1;
      }
   }
   switch(flag) {
      case 1:
         setPosion = SET_HUNDREDS;
         if(input(NUT_1)==1) {
            if(temp1==0) {
               x1=x1+1;
               if (x1>=6) {
                  x1=5;
               }
            }
         }
         if(input(NUT_2)==1) {
            if(temp2==0) {
               x1=x1-1;
               if(x1 <= -6) {
                  x1 = -5;
               }
            }
         }
      break;

      case 2:
         setPosion = SET_DOZENS;
         if(input(NUT_1)==1) {
            if(temp1) {
               x2=x2+1;
               if(x2 >= 10) {
                  x2=0;
               }
            }
         }
         if(input(NUT_2)==1) {
            if(temp2==0) {
               x2=x2-1;
               if(x2 <= -1) {
                  x2 = 9;
               }
            }
         }
      break;
      case 3:
         setPosion = SET_UNITS;
         if(input(NUT_1)==1) {
            if (temp1==0) {
               x3=x3+1;
               if(x3>=10) {
                  x3=0;
               }
            }
         }
         if(input(NUT_2)==1) {
            if (temp2==0) {
               x3=x3-1;
               if(x3 <= -1) {
                  x3 = 9;
               }
            }
         }
      break;
      case 4:
         setPosion = NONSET;
         flag=0;
      break;
   }
   if(x1>=0) {
      vi_Tri= x1*100+x2*10+x3;
   }

   if(x1<0) {
      vi_Tri= (-1)*(-x1*100+x2*10+x3);
   }

   temp=input(NUT_3);
   temp1=input(NUT_1);
   temp2=input(NUT_2);
   return vi_Tri;
}

void display_position (float position) {
   lcd_gotoxy(1,1);
   printf(lcd_putc,"VI TRI:");
   lcd_gotoxy(10,1);
   printf(lcd_putc,"%03.0f",vi_tri);
}

void display_current_setting (setPosion setPosition) {
   lcd_gotoxy(1, 2);
   case(setPosion) {
      case NONSET:
         printf(lcd_putc, "            ");
      break;
      case SET_HUNDREDS:
         printf(lcd_putc, "SET_HUNDREDS");
      break;
      case SET_DOZENS:
         printf(lcd_putc, "SET_DOZENS");
      break;
      case SET_UNITS:
         printf(lcd_putc, "SET_UNITS");
      break;
   }
}
float PIDOutput(float SP, float CP)
{
   errorC = SP-CP;
   P= KP*errorC;
   I = IO+KI*(errorC+errorP)/2*dt;
   D = KD*(errorC-errorP)/dt;
   PID = P+I+D;
   if(PID>250)
   {
      PID=250;
   }
   if(PID<=-250)
   {
      PID=-250;
   }
   IO=I;
   return PID;
}

/******************************* Init Function ********************************/
void timer1_init (void) {
   setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);
   SET_TIMER1(0);
   enable_interrupts(INT_TIMER1);
   enable_interrupts(GlOBAL);
}

void timer0_init(void) {
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16|RTCC_8_bit);      //1.0 ms overflow
   enable_interrupts(INT_EXT);
   enable_interrupts(INT_TIMER0);
   enable_interrupts(GLOBAL);
   set_timer0(6);
}
/**************************** Interrupt Function ******************************/
#INT_TIMER1
void TIMER1_isr(void)
{
  PIDOutput(SP,CP);
}

#INT_EXT
void EXT_isr(void) // pulse count
{
   pulse++;
}

#INT_TIMER0
void  TIMER0_isr(void) //1.0ms over
{
   disable_interrupts(INT_TIMER0);
   count++;
   if(count>1250)
   {
      count=0;
      f=pulse;
      pulse=0;// pulse remove
   }
   enable_interrupts(INT_TIMER0);
}
